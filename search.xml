<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>ajax学习笔记</title>
      <link href="/20232/03/19/ajax%E7%AC%94%E8%AE%B0/"/>
      <url>/20232/03/19/ajax%E7%AC%94%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<h1 id="AJAX（Asynchronous-Javascript-And-Xml）"><a href="#AJAX（Asynchronous-Javascript-And-Xml）" class="headerlink" title="AJAX（Asynchronous Javascript And Xml）"></a>AJAX（Asynchronous Javascript And Xml）</h1><h2 id="传统请求及缺点"><a href="#传统请求及缺点" class="headerlink" title="传统请求及缺点"></a>传统请求及缺点</h2><ul><li>传统的请求都有哪些？<ul><li>直接在浏览器地址栏上输入URL。</li><li>点击超链接</li><li>提交form表单</li><li>使用JS代码发送请求<ul><li>window.open(url)</li><li>document.location.href = url</li><li>window.location.href = url</li><li>….</li></ul></li></ul></li><li>传统请求存在的问题<ul><li>页面全部刷新导致了用户的体验较差。</li><li>传统的请求导致用户的体验有空白期。（用户的体验是不连贯的）</li><li><img src="C:\Users\niannian\Desktop\AJAX\笔记\AJAX同步请求.png" alt="AJAX同步请求"></li></ul></li></ul><h2 id="AJAX概述"><a href="#AJAX概述" class="headerlink" title="AJAX概述"></a>AJAX概述</h2><ul><li>AJAX不能称为一种技术，它是多种技术的综合产物。</li><li>AJAX可以让浏览器发送一种特殊的请求，这种请求可以是：异步的。</li><li>什么是异步，什么是同步？<ul><li>假设有t1和t2线程，t1和t2线程并发，就是异步。</li><li>假设有t1和t2线程，t2在执行的时候，必须等待t1线程执行到某个位置之后t2才能执行，那么t2在等t1，显然他们是排队的，排队的就是同步。</li><li>AJAX是可以发送异步请求的。也就是说，在同一个浏览器页面当中，可以发送多个ajax请求，这些ajax请求之间不需要等待，是并发的。</li></ul></li><li>AJAX代码属于WEB前端的JS代码。和后端的java没有关系，后端也可以是php语言，也可以是C语言。</li><li>AJAX 应用程序可能使用 XML 来传输数据，但将数据作为纯文本或 JSON 文本传输也同样常见。</li><li>AJAX可以更新网页的部分，而不需要重新加载整个页面。（页面局部刷新）</li><li>AJAX可以做到在同一个网页中同时启动多个请求，类似于在同一个网页中启动“多线程”，一个“线程”一个“请求”。</li><li><img src="C:\Users\niannian\Desktop\AJAX\笔记\AJAX异步请求.png" alt=""></li><li><img src="C:\Users\niannian\Desktop\AJAX\笔记\对AJAX异步请求的理解.png" alt=""></li></ul><h2 id="XMLHttpRequest对象"><a href="#XMLHttpRequest对象" class="headerlink" title="XMLHttpRequest对象"></a>XMLHttpRequest对象</h2><ul><li><p>XMLHttpRequest对象是AJAX的核心对象，发送请求以及接收服务器数据的返回，全靠它了。</p></li><li><p>XMLHttpRequest对象，现代浏览器都是支持的，都内置了该对象。直接用即可。</p></li><li><p>创建XMLHttpRequest对象</p><ul><li>```javascript<br>var xhr = new XMLHttpRequest();<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">- XMLHttpRequest对象的方法</span><br><span class="line"></span><br><span class="line">| 方法                                          | 描述                                                         |</span><br><span class="line">| :-------------------------------------------- | :----------------------------------------------------------- |</span><br><span class="line">| abort()                                       | 取消当前请求                                                 |</span><br><span class="line">| getAllResponseHeaders()                       | 返回头部信息                                                 |</span><br><span class="line">| getResponseHeader()                           | 返回特定的头部信息                                           |</span><br><span class="line">| open(*method*, *url*, *async*, *user*, *psw*) | 规定请求method：请求类型 GET 或 POSTurl：文件位置async：true（异步）或 false（同步）user：可选的用户名称psw：可选的密码 |</span><br><span class="line">| send()                                        | 将请求发送到服务器，用于 GET 请求                            |</span><br><span class="line">| send(*string*)                                | 将请求发送到服务器，用于 POST 请求                           |</span><br><span class="line">| setRequestHeader()                            | 向要发送的报头添加标签/值对                                  |</span><br><span class="line"></span><br><span class="line">- XMLHttpRequest对象的属性</span><br><span class="line"></span><br><span class="line">| 属性               | 描述                                                         |</span><br><span class="line">| :----------------- | :----------------------------------------------------------- |</span><br><span class="line">| onreadystatechange | 定义当 readyState 属性发生变化时被调用的函数                 |</span><br><span class="line">| readyState         | 保存 XMLHttpRequest 的状态。0：请求未初始化     1：服务器连接已建立     2：请求已收到    3：正在处理请求    4：请求已完成且响应已就绪 |</span><br><span class="line">| responseText       | 以字符串返回响应数据                                         |</span><br><span class="line">| responseXML        | 以 XML 数据返回响应数据                                      |</span><br><span class="line">| status             | 返回请求的状态号200: &quot;OK&quot;403: &quot;Forbidden&quot;404: &quot;Not Found&quot;    |</span><br><span class="line">| statusText         | 返回状态文本（比如 &quot;OK&quot; 或 &quot;Not Found&quot;）                     |</span><br><span class="line"></span><br><span class="line">## AJAX GET请求</span><br><span class="line"></span><br><span class="line">- 发送AJAX get请求，前端代码：</span><br><span class="line"></span><br><span class="line">  ```html</span><br><span class="line">  &lt;!DOCTYPE html&gt;</span><br><span class="line">  &lt;html lang=&quot;en&quot;&gt;</span><br><span class="line">  &lt;head&gt;</span><br><span class="line">      &lt;meta charset=&quot;UTF-8&quot;&gt;</span><br><span class="line">      &lt;title&gt;发送ajax get请求&lt;/title&gt;</span><br><span class="line">  &lt;/head&gt;</span><br><span class="line">  &lt;body&gt;</span><br><span class="line">  &lt;script type=&quot;text/javascript&quot;&gt;</span><br><span class="line">      window.onload = function () &#123;</span><br><span class="line">          document.getElementById(&quot;btn&quot;).onclick = function () &#123;</span><br><span class="line">              //1. 创建AJAX核心对象</span><br><span class="line">              var xhr = new XMLHttpRequest();</span><br><span class="line">              //2. 注册回调函数</span><br><span class="line">              xhr.onreadystatechange = function()&#123;</span><br><span class="line">                  if (this.readyState == 4) &#123;</span><br><span class="line">                      if (this.status == 200) &#123;</span><br><span class="line">                          // 通过XMLHttpRequest对象的responseText属性可以获取到服务器响应回来的内容。</span><br><span class="line">                          // 并且不管服务器响应回来的是什么，都以普通文本的形势获取。（服务器可能响应回来：普通文本、XML、JSON、HTML...）</span><br><span class="line">                          // innerHTML属性是javascript中的语法，和ajax的XMLHttpRequest对象无关。</span><br><span class="line">                          // innerHTML可以设置元素内部的HTML代码。（innerHTML可以将后面的内容当做一段HTML代码解释并执行）</span><br><span class="line">                          //document.getElementById(&quot;myspan&quot;).innerHTML = this.responseText</span><br><span class="line">                          document.getElementById(&quot;mydiv&quot;).innerHTML = this.responseText</span><br><span class="line">                          // innerText也不是AJAX中的，是javascript中的元素属性，和XMLHttpRequest无关。</span><br><span class="line">                          // innerText也是设置元素中的内容，但是即使后面是一段HTML代码，也是将其看做一个普通字符串设置进去。</span><br><span class="line">                          //document.getElementById(&quot;myspan&quot;).innerText = this.responseText</span><br><span class="line">                      &#125;else&#123;</span><br><span class="line">                          alert(this.status)</span><br><span class="line">                      &#125;</span><br><span class="line">                  &#125;</span><br><span class="line">              &#125;</span><br><span class="line">              //3. 开启通道</span><br><span class="line">              xhr.open(&quot;GET&quot;, &quot;/ajax/ajaxrequest2&quot;, true)</span><br><span class="line">              //4. 发送请求</span><br><span class="line">              xhr.send()</span><br><span class="line">          &#125;</span><br><span class="line">      &#125;</span><br><span class="line">  &lt;/script&gt;</span><br><span class="line">  &lt;button id=&quot;btn&quot;&gt;发送ajax get请求&lt;/button&gt;</span><br><span class="line">  &lt;span id=&quot;myspan&quot;&gt;&lt;/span&gt;</span><br><span class="line">  &lt;div id=&quot;mydiv&quot;&gt;&lt;/div&gt;</span><br><span class="line">  &lt;/body&gt;</span><br><span class="line">  &lt;/html&gt;</span><br></pre></td></tr></table></figure></li></ul></li><li><p>发送AJAX get请求，后端代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.bjpowernode.ajax.servlet;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> jakarta.servlet.ServletException;</span><br><span class="line"><span class="keyword">import</span> jakarta.servlet.annotation.WebServlet;</span><br><span class="line"><span class="keyword">import</span> jakarta.servlet.http.HttpServlet;</span><br><span class="line"><span class="keyword">import</span> jakarta.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> jakarta.servlet.http.HttpServletResponse;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.PrintWriter;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@program</span>: 代码</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@ClassName</span>: AjaxRequest2Servlet</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span>: 1.0</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span>:</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span>: bjpowernode</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@create</span>: 2022-05-13 10:46</span></span><br><span class="line"><span class="comment"> **/</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@WebServlet(&quot;/ajaxrequest2&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AjaxRequest2Servlet</span> <span class="keyword">extends</span> <span class="title class_">HttpServlet</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doGet</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span></span><br><span class="line">            <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">        <span class="comment">// 设置响应的内容类型以及字符集</span></span><br><span class="line">        response.setContentType(<span class="string">&quot;text/html;charset=UTF-8&quot;</span>);</span><br><span class="line">        <span class="comment">// 获取响应流</span></span><br><span class="line">        <span class="type">PrintWriter</span> <span class="variable">out</span> <span class="operator">=</span> response.getWriter();</span><br><span class="line">        <span class="comment">// 响应</span></span><br><span class="line">        out.print(<span class="string">&quot;&lt;font color=&#x27;red&#x27;&gt;用户名已存在！！！&lt;/font&gt;&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p>AJAX get请求如何提交数据呢？</p><ul><li>get请求提交数据是在“请求行”上提交，格式是：url?name=value&amp;name=value&amp;name=value….</li><li>其实这个get请求提交数据的格式是HTTP协议中规定的，遵循协议即可。</li></ul></li></ul><h2 id="AJAX-GET请求的缓存问题"><a href="#AJAX-GET请求的缓存问题" class="headerlink" title="AJAX GET请求的缓存问题"></a>AJAX GET请求的缓存问题</h2><ul><li>对于低版本的IE浏览器来说，AJAX的get请求可能会走缓存。存在缓存问题。对于现代的浏览器来说，大部分浏览器都已经不存在AJAX get缓存问题了。</li><li>什么是AJAX GET请求缓存问题呢？<ul><li>在HTTP协议中是这样规定get请求的：get请求会被缓存起来。</li><li>发送AJAX GET请求时，在同一个浏览器上，前后发送的AJAX请求路径一样的话，对于低版本的IE来说，第二次的AJAX GET请求会走缓存，不走服务器。</li></ul></li><li>POST请求在HTTP协议中规定的是：POST请求不会被浏览器缓存。</li><li>GET请求缓存的优缺点：<ul><li>优点：直接从浏览器缓存中获取资源，不需要从服务器上重新加载资源，速度较快，用户体验好。</li><li>缺点：无法实时获取最新的服务器资源。</li></ul></li><li>浏览器什么时候会走缓存？<ul><li>第一：是一个GET请求</li><li>第二：请求路径已经被浏览器缓存过了。第二次发送请求的时候，这个路径没有变化，会走浏览器缓存。</li></ul></li><li>如果是低版本的IE浏览器，怎么解决AJAX GET请求的缓存问题呢？<ul><li>可以在请求路径url后面添加一个时间戳，这个时间戳是随时变化的。所以每一次发送的请求路径都是不一样的，这样就不会走浏览器的缓存问题了。</li><li>可以采用时间戳：”url?t=” + new Date().getTime()</li><li>或者可以通过随机数：”url?t=” + Math.random()</li><li>也可以随机数+时间戳….</li></ul></li></ul><h2 id="AJAX-POST请求"><a href="#AJAX-POST请求" class="headerlink" title="AJAX POST请求"></a>AJAX POST请求</h2><ul><li><p>AJAX POST请求和GET请求的代码区别在哪里？就是前端代码有区别。后端代码没有区别。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 4. 发送AJAX POST请求</span></span><br><span class="line">xhr.<span class="title function_">setRequestHeader</span>(<span class="string">&quot;Content-Type&quot;</span>, <span class="string">&quot;application/x-www-form-urlencoded&quot;</span>) <span class="comment">// 设置请求头的内容类型。模拟form表单提交数据。</span></span><br><span class="line"><span class="comment">// 获取表单中的数据</span></span><br><span class="line"><span class="keyword">var</span> username = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;username&quot;</span>).<span class="property">value</span>;</span><br><span class="line"><span class="keyword">var</span> password = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;password&quot;</span>).<span class="property">value</span>;</span><br><span class="line"><span class="comment">// send函数中的参数就是发送的数据，这个数据在“请求体”当中发送。</span></span><br><span class="line">xhr.<span class="title function_">send</span>(<span class="string">&quot;username=&quot;</span>+username+<span class="string">&quot;&amp;password=&quot;</span>+password)</span><br></pre></td></tr></table></figure></li><li><p>实现一个案例：使用AJAX POST请求实现用户注册的时候，用户名是否可用。（验证用户名是否可以注册）实现步骤如下：</p><ul><li>在前端，用户输入用户名之后，失去焦点事件blur发生，然后发送AJAX POST请求，提交用户名</li><li>在后端，接收到用户名，连接数据库，根据用户名去表中搜索</li><li>如果用户名已存在<ul><li>后端响应消息：对不起，用户名已存在（在前端页面以红色字体展示）</li></ul></li><li>如果用户名不存在<ul><li>后端响应消息：用户名可以使用（在前端页面以绿色字体展示）</li></ul></li></ul></li><li><p>实现一个案例：用户点击按钮之后，发送AJAX请求，显示学生列表。</p><ul><li>在后端java程序中拼接HTML代码，然后将HTML代码直接响应到浏览器客户端。这种方式不好，不应该在java代码中编写HTML代码，能否在java程序中直接向前端响应数据？可以，可以在后端拼接JSON格式的字符串，或者XML格式的字符串，将这个字符串发送给前端，前端解析即可。</li></ul></li></ul><h2 id="基于JSON的数据交换"><a href="#基于JSON的数据交换" class="headerlink" title="基于JSON的数据交换"></a>基于JSON的数据交换</h2><ul><li><p>在WEB前端中，如何将一个json格式的字符串转换成json对象</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> jsonStr = <span class="string">&quot;&#123;\&quot;username\&quot; : \&quot;zhangsan\&quot;, \&quot;password\&quot; : \&quot;1233344\&quot;&#125;&quot;</span></span><br><span class="line"><span class="keyword">var</span> jsonObj = <span class="title class_">JSON</span>.<span class="title function_">parse</span>(jsonStr)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(jsonObj.<span class="property">username</span>)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(jsonObj.<span class="property">password</span>)</span><br></pre></td></tr></table></figure></li><li><p>在后端拼接JSON格式的字符串，响应给前端的浏览器</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">json.append(<span class="string">&quot;[&quot;</span>);</span><br><span class="line"><span class="keyword">while</span> (rs.next()) &#123;</span><br><span class="line">    <span class="comment">// 获取每个学生的信息</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> rs.getString(<span class="string">&quot;name&quot;</span>);</span><br><span class="line">    <span class="type">String</span> <span class="variable">age</span> <span class="operator">=</span> rs.getString(<span class="string">&quot;age&quot;</span>);</span><br><span class="line">    <span class="type">String</span> <span class="variable">addr</span> <span class="operator">=</span> rs.getString(<span class="string">&quot;addr&quot;</span>);</span><br><span class="line">    <span class="comment">// 拼接json格式的字符串</span></span><br><span class="line">    <span class="comment">// &#123;&quot;name&quot;:&quot;   王五    &quot;,&quot;age&quot;:    20      ,&quot;addr&quot;:&quot;      北京大兴区     &quot;&#125;,</span></span><br><span class="line">    json.append(<span class="string">&quot;&#123;\&quot;name\&quot;:\&quot;&quot;</span>);</span><br><span class="line">    json.append(name);</span><br><span class="line">    json.append(<span class="string">&quot;\&quot;,\&quot;age\&quot;:&quot;</span>);</span><br><span class="line">    json.append(age);</span><br><span class="line">    json.append(<span class="string">&quot;,\&quot;addr\&quot;:\&quot;&quot;</span>);</span><br><span class="line">    json.append(addr);</span><br><span class="line">    json.append(<span class="string">&quot;\&quot;&#125;,&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">jsonStr = json.substring(<span class="number">0</span>, json.length() - <span class="number">1</span>) + <span class="string">&quot;]&quot;</span>;</span><br></pre></td></tr></table></figure></li><li><p>拼接JSON格式的字符串太痛苦，可以使用阿里巴巴的fastjson组件，它可以将java对象转换成json格式的字符串</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">List&lt;Student&gt; studentList = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line"><span class="keyword">while</span> (rs.next()) &#123;</span><br><span class="line">    <span class="comment">// 取出数据</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> rs.getString(<span class="string">&quot;name&quot;</span>);</span><br><span class="line">    <span class="type">int</span> <span class="variable">age</span> <span class="operator">=</span> rs.getInt(<span class="string">&quot;age&quot;</span>);</span><br><span class="line">    <span class="type">String</span> <span class="variable">addr</span> <span class="operator">=</span> rs.getString(<span class="string">&quot;addr&quot;</span>);</span><br><span class="line">    <span class="comment">// 将以上数据封装成Student对象</span></span><br><span class="line">    <span class="type">Student</span> <span class="variable">s</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Student</span>(name, age, addr);</span><br><span class="line">    <span class="comment">// 将Student对象放到List集合</span></span><br><span class="line">    studentList.add(s);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 将List集合转换成json字符串</span></span><br><span class="line">jsonStr = JSON.toJSONString(studentList);</span><br></pre></td></tr></table></figure><p>注意：使用fastjson需要引入fastjson-1.2.2.jar</p></li></ul><h2 id="基于XML的数据交换"><a href="#基于XML的数据交换" class="headerlink" title="基于XML的数据交换"></a>基于XML的数据交换</h2><ul><li><p>注意：如果服务器端响应XML的话，响应的内容类型需要写成：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">response.setContentType(<span class="string">&quot;text/xml;charset=UTF-8&quot;</span>);</span><br></pre></td></tr></table></figure></li><li><p>xml和JSON都是常用的数据交换格式</p><ul><li>XML体积大，解析麻烦。较少用。</li><li>JSON体积小，解析简单，较常用。</li></ul></li><li><p>基于XML的数据交换，前端代码</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>使用XML完成数据交换<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">window</span>.<span class="property">onload</span> = <span class="keyword">function</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;btn&quot;</span>).<span class="property">onclick</span> = <span class="keyword">function</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="comment">// 1.创建XMLHTTPRequest对象</span></span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">var</span> xhr = <span class="keyword">new</span> <span class="title class_">XMLHttpRequest</span>();</span></span><br><span class="line"><span class="language-javascript">            <span class="comment">// 2.注册回调函数</span></span></span><br><span class="line"><span class="language-javascript">            xhr.<span class="property">onreadystatechange</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">readyState</span> == <span class="number">4</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">                    <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">status</span> == <span class="number">200</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">                        <span class="comment">// 服务器端响应了一个XML字符串，这里怎么接收呢？</span></span></span><br><span class="line"><span class="language-javascript">                        <span class="comment">// 使用XMLHTTPRequest对象的responseXML属性，接收返回之后，可以自动封装成document对象（文档对象）</span></span></span><br><span class="line"><span class="language-javascript">                        <span class="keyword">var</span> xmlDoc = <span class="variable language_">this</span>.<span class="property">responseXML</span></span></span><br><span class="line"><span class="language-javascript">                        <span class="comment">//console.log(xmlDoc)</span></span></span><br><span class="line"><span class="language-javascript">                        <span class="comment">// 获取所有的&lt;student&gt;元素，返回了多个对象，应该是数组。</span></span></span><br><span class="line"><span class="language-javascript">                        <span class="keyword">var</span> students = xmlDoc.<span class="title function_">getElementsByTagName</span>(<span class="string">&quot;student&quot;</span>)</span></span><br><span class="line"><span class="language-javascript">                        <span class="comment">//console.log(students[0].nodeName)</span></span></span><br><span class="line"><span class="language-javascript">                        <span class="keyword">var</span> html = <span class="string">&quot;&quot;</span>;</span></span><br><span class="line"><span class="language-javascript">                        <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; students.<span class="property">length</span>; i++) &#123;</span></span><br><span class="line"><span class="language-javascript">                            <span class="keyword">var</span> student = students[i]</span></span><br><span class="line"><span class="language-javascript">                            <span class="comment">// 获取&lt;student&gt;元素下的所有子元素</span></span></span><br><span class="line"><span class="language-javascript">                            html += <span class="string">&quot;&lt;tr&gt;&quot;</span></span></span><br><span class="line"><span class="language-javascript">                            html += <span class="string">&quot;&lt;td&gt;&quot;</span>+(i+<span class="number">1</span>)+<span class="string">&quot;&lt;/td&gt;&quot;</span></span></span><br><span class="line"><span class="language-javascript">                            <span class="keyword">var</span> nameOrAge = student.<span class="property">childNodes</span></span></span><br><span class="line"><span class="language-javascript">                            <span class="keyword">for</span> (<span class="keyword">var</span> j = <span class="number">0</span>; j &lt; nameOrAge.<span class="property">length</span>; j++) &#123;</span></span><br><span class="line"><span class="language-javascript">                                <span class="keyword">var</span> node = nameOrAge[j]</span></span><br><span class="line"><span class="language-javascript">                                <span class="keyword">if</span> (node.<span class="property">nodeName</span> == <span class="string">&quot;name&quot;</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">                                    <span class="comment">//console.log(&quot;name = &quot; + node.textContent)</span></span></span><br><span class="line"><span class="language-javascript">                                    html += <span class="string">&quot;&lt;td&gt;&quot;</span>+node.<span class="property">textContent</span>+<span class="string">&quot;&lt;/td&gt;&quot;</span></span></span><br><span class="line"><span class="language-javascript">                                &#125;</span></span><br><span class="line"><span class="language-javascript">                                <span class="keyword">if</span> (node.<span class="property">nodeName</span> == <span class="string">&quot;age&quot;</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">                                    <span class="comment">//console.log(&quot;age = &quot; + node.textContent)</span></span></span><br><span class="line"><span class="language-javascript">                                    html += <span class="string">&quot;&lt;td&gt;&quot;</span>+node.<span class="property">textContent</span>+<span class="string">&quot;&lt;/td&gt;&quot;</span></span></span><br><span class="line"><span class="language-javascript">                                &#125;</span></span><br><span class="line"><span class="language-javascript">                            &#125;</span></span><br><span class="line"><span class="language-javascript">                            html += <span class="string">&quot;&lt;/tr&gt;&quot;</span></span></span><br><span class="line"><span class="language-javascript">                        &#125;</span></span><br><span class="line"><span class="language-javascript">                        <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;stutbody&quot;</span>).<span class="property">innerHTML</span> = html</span></span><br><span class="line"><span class="language-javascript">                    &#125;<span class="keyword">else</span>&#123;</span></span><br><span class="line"><span class="language-javascript">                        <span class="title function_">alert</span>(<span class="variable language_">this</span>.<span class="property">status</span>)</span></span><br><span class="line"><span class="language-javascript">                    &#125;</span></span><br><span class="line"><span class="language-javascript">                &#125;</span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">            <span class="comment">// 3.开启通道</span></span></span><br><span class="line"><span class="language-javascript">            xhr.<span class="title function_">open</span>(<span class="string">&quot;GET&quot;</span>, <span class="string">&quot;/ajax/ajaxrequest6?t=&quot;</span> + <span class="keyword">new</span> <span class="title class_">Date</span>().<span class="title function_">getTime</span>(), <span class="literal">true</span>)</span></span><br><span class="line"><span class="language-javascript">            <span class="comment">// 4.发送请求</span></span></span><br><span class="line"><span class="language-javascript">            xhr.<span class="title function_">send</span>()</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">&quot;btn&quot;</span>&gt;</span>显示学生列表<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">table</span> <span class="attr">width</span>=<span class="string">&quot;500px&quot;</span> <span class="attr">border</span>=<span class="string">&quot;1px&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">thead</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">th</span>&gt;</span>序号<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">th</span>&gt;</span>姓名<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">th</span>&gt;</span>年龄<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">thead</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tbody</span> <span class="attr">id</span>=<span class="string">&quot;stutbody&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--&lt;tr&gt;</span></span><br><span class="line"><span class="comment">        &lt;td&gt;1&lt;/td&gt;</span></span><br><span class="line"><span class="comment">        &lt;td&gt;zhangsan&lt;/td&gt;</span></span><br><span class="line"><span class="comment">        &lt;td&gt;20&lt;/td&gt;</span></span><br><span class="line"><span class="comment">    &lt;/tr&gt;</span></span><br><span class="line"><span class="comment">    &lt;tr&gt;</span></span><br><span class="line"><span class="comment">        &lt;td&gt;2&lt;/td&gt;</span></span><br><span class="line"><span class="comment">        &lt;td&gt;lisi&lt;/td&gt;</span></span><br><span class="line"><span class="comment">        &lt;td&gt;22&lt;/td&gt;</span></span><br><span class="line"><span class="comment">    &lt;/tr&gt;--&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tbody</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>基于XML的数据交换，后端java程序：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.bjpowernode.ajax.servlet;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> jakarta.servlet.ServletException;</span><br><span class="line"><span class="keyword">import</span> jakarta.servlet.annotation.WebServlet;</span><br><span class="line"><span class="keyword">import</span> jakarta.servlet.http.HttpServlet;</span><br><span class="line"><span class="keyword">import</span> jakarta.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> jakarta.servlet.http.HttpServletResponse;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.PrintWriter;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@program</span>: 代码</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@ClassName</span>: AjaxRequest6Servlet</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span>: 1.0</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span>: 服务器端返回XML字符串</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span>: bjpowernode</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@create</span>: 2022-05-15 11:48</span></span><br><span class="line"><span class="comment"> **/</span></span><br><span class="line"><span class="meta">@WebServlet(&quot;/ajaxrequest6&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AjaxRequest6Servlet</span> <span class="keyword">extends</span> <span class="title class_">HttpServlet</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doGet</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span></span><br><span class="line">            <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">        <span class="comment">// 注意：响应的内容类型是XML。</span></span><br><span class="line">        response.setContentType(<span class="string">&quot;text/xml;charset=UTF-8&quot;</span>);</span><br><span class="line">        <span class="type">PrintWriter</span> <span class="variable">out</span> <span class="operator">=</span> response.getWriter();</span><br><span class="line"></span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">        &lt;students&gt;</span></span><br><span class="line"><span class="comment">            &lt;student&gt;</span></span><br><span class="line"><span class="comment">                &lt;name&gt;zhangsan&lt;/name&gt;</span></span><br><span class="line"><span class="comment">                &lt;age&gt;20&lt;/age&gt;</span></span><br><span class="line"><span class="comment">            &lt;/student&gt;</span></span><br><span class="line"><span class="comment">            &lt;student&gt;</span></span><br><span class="line"><span class="comment">                &lt;name&gt;lisi&lt;/name&gt;</span></span><br><span class="line"><span class="comment">                &lt;age&gt;22&lt;/age&gt;</span></span><br><span class="line"><span class="comment">            &lt;/student&gt;</span></span><br><span class="line"><span class="comment">        &lt;/students&gt;</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line"></span><br><span class="line">        <span class="type">StringBuilder</span> <span class="variable">xml</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuilder</span>();</span><br><span class="line">        xml.append(<span class="string">&quot;&lt;students&gt;&quot;</span>);</span><br><span class="line">        xml.append(<span class="string">&quot;&lt;student&gt;&quot;</span>);</span><br><span class="line">        xml.append(<span class="string">&quot;&lt;name&gt;zhangsan&lt;/name&gt;&quot;</span>);</span><br><span class="line">        xml.append(<span class="string">&quot;&lt;age&gt;20&lt;/age&gt;&quot;</span>);</span><br><span class="line">        xml.append(<span class="string">&quot;&lt;/student&gt;&quot;</span>);</span><br><span class="line">        xml.append(<span class="string">&quot;&lt;student&gt;&quot;</span>);</span><br><span class="line">        xml.append(<span class="string">&quot;&lt;name&gt;lisi&lt;/name&gt;&quot;</span>);</span><br><span class="line">        xml.append(<span class="string">&quot;&lt;age&gt;22&lt;/age&gt;&quot;</span>);</span><br><span class="line">        xml.append(<span class="string">&quot;&lt;/student&gt;&quot;</span>);</span><br><span class="line">        xml.append(<span class="string">&quot;&lt;/students&gt;&quot;</span>);</span><br><span class="line"></span><br><span class="line">        out.print(xml);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li></ul><h2 id="AJAX乱码问题"><a href="#AJAX乱码问题" class="headerlink" title="AJAX乱码问题"></a>AJAX乱码问题</h2><ul><li><p>测试内容：</p><ul><li>发送ajax get请求<ul><li>发送数据到服务器，服务器获取的数据是否乱码？</li><li>服务器响应给前端的中文，会不会乱码？</li></ul></li><li>发送ajax post请求<ul><li>发送数据到服务器，服务器获取的数据是否乱码？</li><li>服务器响应给前端的中文，会不会乱码？</li></ul></li></ul></li><li><p>包括还要测试tomcat服务器的版本：</p><ul><li>tomcat10和tomcat9都要进行测试。</li></ul></li><li><p>测试结果：</p><ul><li><p>对于tomcat10来说，关于字符集，我们程序员不需要干涉，不会出现乱码。</p></li><li><p>对于tomcat9来说呢？</p><ul><li><p>响应中文的时候，会出现乱码，怎么解决？</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">response.setContentType(<span class="string">&quot;text/html;charset=UTF-8&quot;</span>);</span><br></pre></td></tr></table></figure></li><li><p>发送ajax post请求的时候，发送给服务器的数据，服务器接收之后乱码，怎么解决？</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">request.setCharacterEncoding(<span class="string">&quot;UTF-8&quot;</span>);</span><br></pre></td></tr></table></figure></li></ul></li></ul></li></ul><h2 id="AJAX的异步与同步"><a href="#AJAX的异步与同步" class="headerlink" title="AJAX的异步与同步"></a>AJAX的异步与同步</h2><ul><li><p>什么是异步？什么是同步？</p><ul><li>ajax请求1和ajax请求2，同时并发，谁也不用等谁，这就是异步。（a不等b，b也不等a）</li><li>如果ajax请求1在发送的时候需要等待ajax请求2结束之后才能发送，那么这就是同步。（a等待b，或者b等待a，只要发生等待，就是同步。）</li></ul></li><li><p>异步和同步在代码上如何实现？</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 假设这个是ajax请求1</span></span><br><span class="line"><span class="comment">// 如果第三个参数是false：这个就表示“ajax请求1”不支持异步，也就是说ajax请求1发送之后，会影响其他ajax请求的发送，只有当我这个请求结束之后，你们其他的ajax请求才能发送。</span></span><br><span class="line"><span class="comment">// false表示，不支持异步。我这个请求发了之后，你们其他的请求都要靠边站。都等着。你们别动呢，等我结束了你们再说。</span></span><br><span class="line">xhr1.<span class="title function_">open</span>(<span class="string">&quot;请求方式&quot;</span>, <span class="string">&quot;URL&quot;</span>, <span class="literal">false</span>)</span><br><span class="line">xhr1.<span class="title function_">send</span>()</span><br><span class="line"></span><br><span class="line"><span class="comment">// 假设这个是ajax请求2</span></span><br><span class="line"><span class="comment">// 如果第三个参数是true：这个就表示“ajax请求2”支持异步请求，也就是说ajax请求2发送之后，不影响其他ajax请求的发送。</span></span><br><span class="line">xhr2.<span class="title function_">open</span>(<span class="string">&quot;请求方式&quot;</span>, <span class="string">&quot;URL&quot;</span>, <span class="literal">true</span>) </span><br><span class="line">xhr2.<span class="title function_">send</span>()</span><br></pre></td></tr></table></figure></li><li><p>什么情况下用同步？（大部分情况下我们都是使用ajax异步方式，同步很少用。）</p><ul><li>举一个例子<ul><li>用户注册<ul><li>用户名需要发送ajax请求进行校验</li><li>邮箱地址也需要发送ajax请求校验</li><li>其他的也可能需要发送ajax请求。。。</li><li>并且最终注册按钮的时候，也是发送ajax请求进行注册。</li><li>那么显然，注册的Ajax请求和校验的ajax请求不能异步，必须等待所有的校验ajax请求结束之后，注册的ajax请求才能发。</li></ul></li></ul></li></ul></li></ul><h2 id="AJAX代码封装"><a href="#AJAX代码封装" class="headerlink" title="AJAX代码封装"></a>AJAX代码封装</h2><ul><li><p>AJAX请求相关的代码都是类似的，有很多重复的代码，这些重复的代码能不能不写，能不能封装一个工具类。要发送ajax请求的话，就直接调用这个工具类中的相关函数即可。</p></li><li><p>接下来，手动封装一个工具类，这个工具类我们可以把它看做是一个JS的库。我们把这个JS库起一个名字，叫做jQuery。（我这里封装的jQuery只是一个前端的库，和后端的java没有关系，只是为了方便web前端代码的编写，提高WEB前端的开发效率）</p></li><li><p>手动开发jQuery，源代码</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">jQuery</span>(<span class="params">selector</span>)&#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">typeof</span> selector == <span class="string">&quot;string&quot;</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (selector.<span class="title function_">charAt</span>(<span class="number">0</span>) == <span class="string">&quot;#&quot;</span>) &#123;</span><br><span class="line">            domObj = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(selector.<span class="title function_">substring</span>(<span class="number">1</span>))</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> <span class="title function_">jQuery</span>()</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">typeof</span> selector == <span class="string">&quot;function&quot;</span>) &#123;</span><br><span class="line">        <span class="variable language_">window</span>.<span class="property">onload</span> = selector</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">html</span> = <span class="keyword">function</span>(<span class="params">htmlStr</span>)&#123;</span><br><span class="line">        domObj.<span class="property">innerHTML</span> = htmlStr</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">click</span> = <span class="keyword">function</span>(<span class="params">fun</span>)&#123;</span><br><span class="line">        domObj.<span class="property">onclick</span> = fun</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">focus</span> = <span class="keyword">function</span> (<span class="params">fun</span>)&#123;</span><br><span class="line">        domObj.<span class="property">onfocus</span> = fun</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">blur</span> = <span class="keyword">function</span>(<span class="params">fun</span>) &#123;</span><br><span class="line">        domObj.<span class="property">onblur</span> = fun</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">change</span> = <span class="keyword">function</span> (<span class="params">fun</span>)&#123;</span><br><span class="line">        domObj.<span class="property">onchange</span> = fun</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">val</span> = <span class="keyword">function</span>(<span class="params">v</span>)&#123;</span><br><span class="line">        <span class="keyword">if</span> (v == <span class="literal">undefined</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> domObj.<span class="property">value</span></span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            domObj.<span class="property">value</span> = v</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 静态的方法，发送ajax请求</span></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 分析：使用ajax函数发送ajax请求的时候，需要程序员给我们传过来什么？</span></span><br><span class="line"><span class="comment">     *      请求的方式(type)：GET/POST</span></span><br><span class="line"><span class="comment">     *      请求的URL(url)：url</span></span><br><span class="line"><span class="comment">     *      请求时提交的数据(data)：data</span></span><br><span class="line"><span class="comment">     *      请求时发送异步请求还是同步请求(async)：true表示异步，false表示同步。</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    jQuery.<span class="property">ajax</span> = <span class="keyword">function</span>(<span class="params">jsonArgs</span>)&#123;</span><br><span class="line">        <span class="comment">// 1.</span></span><br><span class="line">        <span class="keyword">var</span> xhr = <span class="keyword">new</span> <span class="title class_">XMLHttpRequest</span>();</span><br><span class="line">        <span class="comment">// 2.</span></span><br><span class="line">        xhr.<span class="property">onreadystatechange</span> = <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">            <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">readyState</span> == <span class="number">4</span>) &#123;</span><br><span class="line">                <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">status</span> == <span class="number">200</span>) &#123;</span><br><span class="line">                    <span class="comment">// 我们这个工具类在封装的时候，先不考虑那么多，假设服务器返回的都是json格式的字符串。</span></span><br><span class="line">                    <span class="keyword">var</span> jsonObj = <span class="title class_">JSON</span>.<span class="title function_">parse</span>(<span class="variable language_">this</span>.<span class="property">responseText</span>)</span><br><span class="line">                    <span class="comment">// 调用函数</span></span><br><span class="line">                    jsonArgs.<span class="title function_">success</span>(jsonObj)</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (jsonArgs.<span class="property">type</span>.<span class="title function_">toUpperCase</span>() == <span class="string">&quot;POST&quot;</span>) &#123;</span><br><span class="line">            <span class="comment">// 3.</span></span><br><span class="line">            xhr.<span class="title function_">open</span>(<span class="string">&quot;POST&quot;</span>, jsonArgs.<span class="property">url</span>, jsonArgs.<span class="property">async</span>)</span><br><span class="line">            <span class="comment">// 4.</span></span><br><span class="line">            xhr.<span class="title function_">setRequestHeader</span>(<span class="string">&quot;Content-Type&quot;</span>, <span class="string">&quot;application/x-www-form-urlencoded&quot;</span>)</span><br><span class="line">            xhr.<span class="title function_">send</span>(jsonArgs.<span class="property">data</span>)</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (jsonArgs.<span class="property">type</span>.<span class="title function_">toUpperCase</span>() == <span class="string">&quot;GET&quot;</span>) &#123;</span><br><span class="line">            xhr.<span class="title function_">open</span>(<span class="string">&quot;GET&quot;</span>, jsonArgs.<span class="property">url</span> + <span class="string">&quot;?&quot;</span> + jsonArgs.<span class="property">data</span>, jsonArgs.<span class="property">async</span>)</span><br><span class="line">            xhr.<span class="title function_">send</span>()</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">$ = jQuery</span><br><span class="line"></span><br><span class="line"><span class="comment">// 这里有个细节，执行这个目的是为了让静态方法ajax生效。</span></span><br><span class="line"><span class="keyword">new</span> <span class="title function_">jQuery</span>()</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p>使用以上库，怎么用？</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span> <span class="attr">src</span>=<span class="string">&quot;/ajax/js/jQuery-1.0.0.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    $(<span class="keyword">function</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">        $(<span class="string">&quot;#btn1&quot;</span>).<span class="title function_">click</span>(<span class="keyword">function</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">            $.<span class="title function_">ajax</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">                type : <span class="string">&quot;POST&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">                url : <span class="string">&quot;/ajax/ajaxrequest11&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">                data : <span class="string">&quot;username=&quot;</span> + $(<span class="string">&quot;#username&quot;</span>).<span class="title function_">val</span>(),</span></span><br><span class="line"><span class="language-javascript">                <span class="keyword">async</span> : <span class="literal">true</span>,</span></span><br><span class="line"><span class="language-javascript">                success : <span class="keyword">function</span>(<span class="params">json</span>)&#123;</span></span><br><span class="line"><span class="language-javascript">                    $(<span class="string">&quot;#div1&quot;</span>).<span class="title function_">html</span>(json.<span class="property">uname</span>)</span></span><br><span class="line"><span class="language-javascript">                &#125;</span></span><br><span class="line"><span class="language-javascript">            &#125;)</span></span><br><span class="line"><span class="language-javascript">        &#125;)</span></span><br><span class="line"><span class="language-javascript">    &#125;)</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul><h2 id="AJAX实现省市联动"><a href="#AJAX实现省市联动" class="headerlink" title="AJAX实现省市联动"></a>AJAX实现省市联动</h2><ul><li><p>什么是省市联动？</p><ul><li>在网页上，选择对应的省份之后，动态的关联出该省份对应的市。选择对应的市之后，动态的关联出该市对应的区。（首先要清楚需求）</li></ul></li><li><p>进行数据库表的设计</p><ul><li><p>```<br>t_area （区域表）</p><h2 id="id-PK-自增-code-name-pcode"><a href="#id-PK-自增-code-name-pcode" class="headerlink" title="id(PK-自增)      code        name        pcode"></a>id(PK-自增)      code        name        pcode</h2><p>1                001         河北省        null<br>2                002         河南省        null<br>3                003         石家庄        001<br>4                004         邯郸             001<br>5                005         郑州             002<br>6                006         洛阳             002<br>7                007         丛台区        004  </p><p>将全国所有的省、市、区、县等信息都存储到一张表当中。<br>采用的存储方式实际上是code pcode形势。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">- 建表t_area，模拟好数据。</span><br><span class="line"></span><br><span class="line">- 首先实现第一个功能：</span><br><span class="line"></span><br><span class="line">  - 页面加载完毕之后，先把省份全部展现出来。</span><br><span class="line"></span><br><span class="line">## AJAX跨域问题</span><br><span class="line"></span><br><span class="line">### 跨域</span><br><span class="line"></span><br><span class="line">- 跨域是指从一个域名的网页去请求另一个域名的资源。比如从百度(https://baidu.com)页面去请求京东(https://www.jd.com)的资源。</span><br><span class="line">- 通过超链接或者form表单提交或者window.location.href的方式进行跨域是不存在问题的（**大家可以编写程序测试一下**）。但在一个域名的网页中的一段js代码发送ajax请求去访问另一个域名中的资源，由于同源策略的存在导致无法跨域访问，那么ajax就存在这种跨域问题。</span><br><span class="line">- 同源策略是指一段脚本只能读取来自同一来源的窗口和文档的属性，同源就是协议、域名和端口都相同。</span><br><span class="line">- 同源策略有什么用？如果你刚刚在网银输入账号密码，查看了自己还有1万块钱，紧接着访问一些不规矩的网站，这个网站可以访问刚刚的网银站点，并且获取账号密码，那后果可想而知。所以，从安全的角度来讲，同源策略是有利于保护网站信息的。</span><br><span class="line">- 有一些情况下，我们是需要使用ajax进行跨域访问的。比如某公司的A页面(a.bjpowernode.com)有可能需要获取B页面(b.bjpowernode.com)。</span><br><span class="line"></span><br><span class="line">### 同源还是不同源</span><br><span class="line"></span><br><span class="line">- 区分同源和不同源的三要素</span><br><span class="line"></span><br><span class="line">- - 协议</span><br><span class="line">  - 域名</span><br><span class="line">  - 端口</span><br><span class="line"></span><br><span class="line">- 协议一致，域名一致，端口号一致，三个要素都一致，才是同源，其它一律都是不同源</span><br><span class="line"></span><br><span class="line">| **URL1**                           | **URL2**                        | **是否同源** | 描述               |</span><br><span class="line">| ---------------------------------- | ------------------------------- | ------------ | ------------------ |</span><br><span class="line">| http://localhost:8080/a/index.html | http://localhost:8080/a/first   | 同源         | 协议 域名 端口一致 |</span><br><span class="line">| http://localhost:8080/a/index.html | http://localhost:8080/b/first   | 同源         | 协议 域名 端口一致 |</span><br><span class="line">| http://www.myweb.com:8080/a.js     | https://www.myweb.com:8080/b.js | 不同源       | 协议不同           |</span><br><span class="line">| http://www.myweb.com:8080/a.js     | http://www.myweb.com:8081/b.js  | 不同源       | 端口不同           |</span><br><span class="line">| http://www.myweb.com/a.js          | http://www.myweb2.com/b.js      | 不同源       | 域名不同           |</span><br><span class="line">| http://www.myweb.com/a.js          | http://crm.myweb.com/b.js       | 不同源       | 子域名不同         |</span><br><span class="line"></span><br><span class="line">### 复现AJAX跨域问题</span><br><span class="line"></span><br><span class="line">### AJAX跨域解决方案</span><br><span class="line"></span><br><span class="line">#### 方案1：设置响应头</span><br><span class="line"></span><br><span class="line">- 核心原理：跨域访问的资源允许你跨域访问。</span><br><span class="line"></span><br><span class="line">- 实现：</span><br><span class="line"></span><br><span class="line">  - ```java</span><br><span class="line">    response.setHeader(&quot;Access-Control-Allow-Origin&quot;, &quot;http://localhost:8080&quot;); // 允许某个</span><br><span class="line">    response.setHeader(&quot;Access-Control-Allow-Origin&quot;, &quot;*&quot;); // 允许所有</span><br></pre></td></tr></table></figure></li></ul></li></ul><h4 id="方案2：jsonp"><a href="#方案2：jsonp" class="headerlink" title="方案2：jsonp"></a>方案2：jsonp</h4><ul><li>jsonp：json with padding（带填充的json【学完之后再理解这个什么意思！！！】）</li><li>jsonp不是一个真正的ajax请求。只不过可以完成ajax的局部刷新效果。可以说jsonp是一种类ajax请求的机制。</li><li>jsonp不是ajax请求，但是可以完成局部刷新的效果，并且可以解决跨域问题。</li><li>注意：jsonp解决跨域的时候，只支持GET请求。不支持post请求。</li></ul><h4 id="方案3：jQuery封装的jsonp"><a href="#方案3：jQuery封装的jsonp" class="headerlink" title="方案3：jQuery封装的jsonp"></a>方案3：jQuery封装的jsonp</h4><ul><li><p>牛人们写的jQuery库，已经对jsonp进行了封装。大家可以直接拿来用。</p></li><li><p>用之前需要引入jQuery库的js文件。（这里的jQuery库咱们就不再封装了，咱们直接用jQuery写好的jsonp方式。）</p></li><li><p>jQuery中的jsonp其实就是我们方案2的高度封装，底层原理完全相同。</p></li><li><p>核心代码</p><ul><li><pre><code class="lang-javascript">$.ajax(&#123;    type : &quot;GET&quot;,    url : &quot;跨域的url&quot;,    dataType : &quot;jsonp&quot;, // 指定数据类型    jsonp : &quot;fun&quot;, // 指定参数名（不设置的时候，默认是：&quot;callback&quot;）    jsonpCallback : &quot;sayHello&quot; // 指定回调函数的名字                               // （不设置的时候，jQuery会自动生成一个随机的回调函数，                               //并且这个回调函数还会自动调用success的回调函数。）&#125;)</code></pre></li></ul></li></ul><h4 id="方案4：代理机制（httpclient）"><a href="#方案4：代理机制（httpclient）" class="headerlink" title="方案4：代理机制（httpclient）"></a>方案4：代理机制（httpclient）</h4><ul><li>使用Java程序怎么去发送get/post请求呢？【GET和POST请求就是HTTP请求。】<ul><li>第一种方案：使用JDK内置的API（java.net.URL…..），这些API是可以发送HTTP请求的。</li><li>第二种方案：使用第三方的开源组件，比如：apache的httpclient组件。（httpclient组件是开源免费的，可以直接用）</li></ul></li><li>在java程序中，使用httpclient组件可以发送http请求。<ul><li>对于httpclient组件的代码，大家目前可以不进行深入的研究，可以从网上直接搜。然后粘贴过来，改一改，看看能不能完成发送get和post请求。</li><li>使用httpclient组件，需要先将这个组件相关的jar包引入到项目当中。</li></ul></li></ul><h4 id="方案5：nginx反向代理"><a href="#方案5：nginx反向代理" class="headerlink" title="方案5：nginx反向代理"></a>方案5：nginx反向代理</h4><ul><li>nginx反向代理中也是使用了这种代理机制来完成AJAX的跨域，实现起来非常简单，只要修改一个nginx的配置即可。以后大家学习nginx之后再说吧。！！！！</li></ul><h2 id="AJAX实现搜索联想-自动补全"><a href="#AJAX实现搜索联想-自动补全" class="headerlink" title="AJAX实现搜索联想 自动补全"></a>AJAX实现搜索联想 自动补全</h2><ul><li>什么是搜索联想？自动补全？<ul><li>百度是一个很典型的代表。在百度的搜索框中输入相关信息的时候，会有搜索联想以及自动补全。</li><li>搜索联想和自动补全：实际上是为了方便用户的使用。让用户的体验更好。</li><li>搜索联想：当用户输入一些单词之后，自动联想出用户要搜索的信息，给一个提示。</li><li>自动补全：当联想出一些内容之后，用户点击某个联想的单词，然后将这个单词自动补全到搜索框当中。</li><li>搜索联想和自动补全功能，因为是页面局部刷新效果，所以需要使用ajax请求来完成。</li></ul></li><li>搜索联想，自动补全功能的核心实现原理？<ul><li>当键盘事件发生之后，比如：keyup：键弹起事件。</li><li>发送ajax请求，请求中提交用户输入的搜索内容，例如：北京（发送ajax请求，携带“北京”两个字）</li><li>后端接收到ajax请求，接收到“北京”两个字，执行select语句进行模糊查询。返回查询结果。</li><li>将查询结果封装成json格式的字符串，将json格式的字符串响应到前端。</li><li>前端接收到json格式的字符串之后，解析这个json字符串，动态展示页面。</li></ul></li></ul><h2 id="附录：HTTP状态信息"><a href="#附录：HTTP状态信息" class="headerlink" title="附录：HTTP状态信息"></a>附录：HTTP状态信息</h2><h3 id="1xx-信息"><a href="#1xx-信息" class="headerlink" title="1xx: 信息"></a>1xx: 信息</h3><div class="table-container"><table><thead><tr><th style="text-align:left">消息:</th><th style="text-align:left">描述:</th></tr></thead><tbody><tr><td style="text-align:left">100 Continue</td><td style="text-align:left">服务器仅接收到部分请求，但是一旦服务器并没有拒绝该请求，客户端应该继续发送其余的请求。</td></tr><tr><td style="text-align:left">101 Switching Protocols</td><td style="text-align:left">服务器转换协议：服务器将遵从客户的请求转换到另外一种协议。</td></tr></tbody></table></div><h3 id="2xx-成功"><a href="#2xx-成功" class="headerlink" title="2xx: 成功"></a>2xx: 成功</h3><div class="table-container"><table><thead><tr><th style="text-align:left">消息:</th><th style="text-align:left">描述:</th></tr></thead><tbody><tr><td style="text-align:left">200 OK</td><td style="text-align:left">请求成功（其后是对GET和POST请求的应答文档。）</td></tr><tr><td style="text-align:left">201 Created</td><td style="text-align:left">请求被创建完成，同时新的资源被创建。</td></tr><tr><td style="text-align:left">202 Accepted</td><td style="text-align:left">供处理的请求已被接受，但是处理未完成。</td></tr><tr><td style="text-align:left">203 Non-authoritative Information</td><td style="text-align:left">文档已经正常地返回，但一些应答头可能不正确，因为使用的是文档的拷贝。</td></tr><tr><td style="text-align:left">204 No Content</td><td style="text-align:left">没有新文档。浏览器应该继续显示原来的文档。如果用户定期地刷新页面，而Servlet可以确定用户文档足够新，这个状态代码是很有用的。</td></tr><tr><td style="text-align:left">205 Reset Content</td><td style="text-align:left">没有新文档。但浏览器应该重置它所显示的内容。用来强制浏览器清除表单输入内容。</td></tr><tr><td style="text-align:left">206 Partial Content</td><td style="text-align:left">客户发送了一个带有Range头的GET请求，服务器完成了它。</td></tr></tbody></table></div><h3 id="3xx-重定向"><a href="#3xx-重定向" class="headerlink" title="3xx: 重定向"></a>3xx: 重定向</h3><div class="table-container"><table><thead><tr><th style="text-align:left">消息:</th><th style="text-align:left">描述:</th></tr></thead><tbody><tr><td style="text-align:left">300 Multiple Choices</td><td style="text-align:left">多重选择。链接列表。用户可以选择某链接到达目的地。最多允许五个地址。</td></tr><tr><td style="text-align:left">301 Moved Permanently</td><td style="text-align:left">所请求的页面已经转移至新的url。</td></tr><tr><td style="text-align:left">302 Found</td><td style="text-align:left">所请求的页面已经临时转移至新的url。</td></tr><tr><td style="text-align:left">303 See Other</td><td style="text-align:left">所请求的页面可在别的url下被找到。</td></tr><tr><td style="text-align:left">304 Not Modified</td><td style="text-align:left">未按预期修改文档。客户端有缓冲的文档并发出了一个条件性的请求（一般是提供If-Modified-Since头表示客户只想比指定日期更新的文档）。服务器告诉客户，原来缓冲的文档还可以继续使用。</td></tr><tr><td style="text-align:left">305 Use Proxy</td><td style="text-align:left">客户请求的文档应该通过Location头所指明的代理服务器提取。</td></tr><tr><td style="text-align:left">306 <em>Unused</em></td><td style="text-align:left">此代码被用于前一版本。目前已不再使用，但是代码依然被保留。</td></tr><tr><td style="text-align:left">307 Temporary Redirect</td><td style="text-align:left">被请求的页面已经临时移至新的url。</td></tr></tbody></table></div><h3 id="4xx-客户端错误"><a href="#4xx-客户端错误" class="headerlink" title="4xx: 客户端错误"></a>4xx: 客户端错误</h3><div class="table-container"><table><thead><tr><th style="text-align:left">消息:</th><th style="text-align:left">描述:</th></tr></thead><tbody><tr><td style="text-align:left">400 Bad Request</td><td style="text-align:left">服务器未能理解请求。</td></tr><tr><td style="text-align:left">401 Unauthorized</td><td style="text-align:left">被请求的页面需要用户名和密码。</td></tr><tr><td style="text-align:left">402 Payment Required</td><td style="text-align:left">此代码尚无法使用。</td></tr><tr><td style="text-align:left">403 Forbidden</td><td style="text-align:left">对被请求页面的访问被禁止。</td></tr><tr><td style="text-align:left">404 Not Found</td><td style="text-align:left">服务器无法找到被请求的页面。</td></tr><tr><td style="text-align:left">405 Method Not Allowed</td><td style="text-align:left">请求中指定的方法不被允许。</td></tr><tr><td style="text-align:left">406 Not Acceptable</td><td style="text-align:left">服务器生成的响应无法被客户端所接受。</td></tr><tr><td style="text-align:left">407 Proxy Authentication Required</td><td style="text-align:left">用户必须首先使用代理服务器进行验证，这样请求才会被处理。</td></tr><tr><td style="text-align:left">408 Request Timeout</td><td style="text-align:left">请求超出了服务器的等待时间。</td></tr><tr><td style="text-align:left">409 Conflict</td><td style="text-align:left">由于冲突，请求无法被完成。</td></tr><tr><td style="text-align:left">410 Gone</td><td style="text-align:left">被请求的页面不可用。</td></tr><tr><td style="text-align:left">411 Length Required</td><td style="text-align:left">“Content-Length” 未被定义。如果无此内容，服务器不会接受请求。</td></tr><tr><td style="text-align:left">412 Precondition Failed</td><td style="text-align:left">请求中的前提条件被服务器评估为失败。</td></tr><tr><td style="text-align:left">413 Request Entity Too Large</td><td style="text-align:left">由于所请求的实体的太大，服务器不会接受请求。</td></tr><tr><td style="text-align:left">414 Request-url Too Long</td><td style="text-align:left">由于url太长，服务器不会接受请求。当post请求被转换为带有很长的查询信息的get请求时，就会发生这种情况。</td></tr><tr><td style="text-align:left">415 Unsupported Media Type</td><td style="text-align:left">由于媒介类型不被支持，服务器不会接受请求。</td></tr><tr><td style="text-align:left">416</td><td style="text-align:left">服务器不能满足客户在请求中指定的Range头。</td></tr><tr><td style="text-align:left">417 Expectation Failed</td></tr></tbody></table></div><h3 id="5xx-服务器错误"><a href="#5xx-服务器错误" class="headerlink" title="5xx: 服务器错误"></a>5xx: 服务器错误</h3><div class="table-container"><table><thead><tr><th style="text-align:left">消息:</th><th style="text-align:left">描述:</th></tr></thead><tbody><tr><td style="text-align:left">500 Internal Server Error</td><td style="text-align:left">请求未完成。服务器遇到不可预知的情况。</td></tr><tr><td style="text-align:left">501 Not Implemented</td><td style="text-align:left">请求未完成。服务器不支持所请求的功能。</td></tr><tr><td style="text-align:left">502 Bad Gateway</td><td style="text-align:left">请求未完成。服务器从上游服务器收到一个无效的响应。</td></tr><tr><td style="text-align:left">503 Service Unavailable</td><td style="text-align:left">请求未完成。服务器临时过载或当机。</td></tr><tr><td style="text-align:left">504 Gateway Timeout</td><td style="text-align:left">网关超时。</td></tr><tr><td style="text-align:left">505 HTTP Version Not Supported</td><td style="text-align:left">服务器不支持请求中指明的HTTP协议版本。</td></tr></tbody></table></div>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> ajax </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数据结构</title>
      <link href="/2023/05/19/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
      <url>/2023/05/19/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> 数据结构 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据结构 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>算法leetcode每日一题</title>
      <link href="/2023/01/24/%E7%AE%97%E6%B3%95-1/"/>
      <url>/2023/01/24/%E7%AE%97%E6%B3%95-1/</url>
      
        <content type="html"><![CDATA[<h1 id="1-水仙花数"><a href="#1-水仙花数" class="headerlink" title="1.水仙花数"></a>1.水仙花数</h1>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法 </tag>
            
            <tag> leetcood </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>刷机教程</title>
      <link href="/2023/01/19/%E9%87%8D%E8%A3%85%E7%B3%BB%E7%BB%9F%E6%95%99%E7%A8%8B/"/>
      <url>/2023/01/19/%E9%87%8D%E8%A3%85%E7%B3%BB%E7%BB%9F%E6%95%99%E7%A8%8B/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> 刷机教程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 重装系统 </tag>
            
            <tag> 刷机教程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>3</title>
      <link href="/2023/01/19/javase%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
      <url>/2023/01/19/javase%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>javaweb学习笔记</title>
      <link href="/2023/01/19/javaweb%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
      <url>/2023/01/19/javaweb%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<h1 id="学习路线"><a href="#学习路线" class="headerlink" title="学习路线"></a>学习路线</h1><ul><li>从JavaWEB开始。（Servlet为核心，从Servlet开始学习。）</li><li>JSP（JSP使用较少了，但是还有用，所以时间上少一些。快速地学习一下JSP。）</li><li>AJAX（异步通信技术。）</li><li>jQuery（JavaScript库。）</li><li>MyBatis</li><li>Spring</li><li>SpringMVC</li><li>SpringBoot</li><li>SpringCloud</li><li>….</li></ul><h1 id="学习-javaweb前提"><a href="#学习-javaweb前提" class="headerlink" title="学习 javaweb前提"></a>学习 javaweb前提</h1><ul><li>JavaSE（Java语言的标准版，Java提供的最基本的类库）<ul><li>Java的开发环境搭建</li><li>Java的基础语法</li><li>Java的面向对象</li><li>数组</li><li>常用类</li><li>异常</li><li>集合</li><li>多线程</li><li>IO流</li><li>反射机制</li><li>注解Annotation</li><li>…..</li></ul></li><li>MySQL（数据库）<ul><li>最基本的要求是：能够编写增删改查等简单的SQL语句即可。</li></ul></li><li>JDBC（Java语言链接数据库）<ul><li>这是一套Java语言链接数据库的接口。</li></ul></li><li>WEB前端（会一些）<ul><li>HTML（网页）</li><li>CSS（层叠样式表语言，修饰HTML）</li><li>JavaScript（一种脚本语言，运行在浏览器当中，让浏览器中的元素可以增删改。让网页产生更强的交互效果）</li></ul></li><li>WEB后端<ul><li>Servlet（Server Applet：服务器端的Java小程序）</li><li>JSP</li><li>AJAX</li><li>jQuery</li><li>MyBatis</li><li>Spring</li><li>SpringMVC</li><li>SpringBoot</li><li>SpringCloud</li><li>……</li></ul></li></ul><h1 id="Servlet"><a href="#Servlet" class="headerlink" title="Servlet"></a>Servlet</h1><h2 id="关于系统架构"><a href="#关于系统架构" class="headerlink" title="关于系统架构"></a>关于系统架构</h2><ol><li>系统架构包括什么形式？<ul><li>C/S架构</li><li>B/S架构</li></ul></li><li>C/S架构？<ul><li>Client / Server（客户端 / 服务器）</li><li>C/S架构的软件或者说系统有哪些呢？<ul><li>QQ（先去腾讯官网下载一个QQ软件，几十MB，然后把这个客户端软件安装上去，然后输入QQ号以及密码，登录之后，就可以和你的朋友聊天了，就可以使用这个软件了。）</li></ul></li><li>C/S架构的特点：需要安装特定的客户端软件。</li><li>C/S架构的系统优点和缺点分别是什么？<ul><li>优点：<ul><li>速度快（软件中的数据大部分都是集成到客户端软件当中的，很少量的数据从服务器端传送过来，所以C/S结构的系统速度快）</li><li>体验好（速度又快，界面又酷炫，当然体验好了。）</li><li>界面酷炫（专门的语言去实现界面的，更加灵活。）</li><li>服务器压力小（因为大量的数据都是集成在客户端软件当中，所以服务器只需要传送很少的数据量，当然服务器压力小。）</li><li>安全（因为大量的数据是集成在客户端软件当中的，并且客户端有很多个，服务器虽然只有一个，就算服务器那边地震了，火灾了，服务器受损了，问题也不大，因为大量的数据在多个客户端上有缓存，有存储，所以从这个方面来说，C/S结构的系统比较安全。）</li><li>…..</li></ul></li><li>缺点：<ul><li>升级维护比较差劲。（升级维护比较麻烦。成本比较高。每一个客户端软件都需要升级。有一些软件不是那么容易安装的。）</li></ul></li></ul></li></ul></li><li>B/S架构？<ul><li>B/S（Browser / Server，浏览器 / 服务器）</li><li><a href="http://www.baidu.com">http://www.baidu.com</a></li><li><a href="http://www.jd.com">http://www.jd.com</a></li><li><a href="http://www.126.com">http://www.126.com</a></li><li>B/S结构的系统是不是一个特殊的C/S系统？<ul><li>实际上B/S结构的系统还是一个C/S，只不过这个C比较特殊，这个Client是一个固定不变浏览器软件。</li></ul></li><li>B/S结构的系统优点和缺点是：<ul><li>优点：<ul><li>升级维护方便，成本比较低。（只需要升级服务器端即可。）</li><li>不需要安装特定的客户端软件，用户操作极其方便。只需要打开浏览器，输入网址即可。</li></ul></li><li>缺点：<ul><li>速度慢（不是因为带宽低的问题，是因为所有的数据都是在服务器上，用户发送的每一个请求都是需要服务器全身心的响应数据，所以B/S结构的系统在网络中传送的数据量比较大。）</li><li>体验差（界面不是那么酷炫，因为浏览器只支持三个语言HTML CSS JavaScript。在加上速度慢。）</li><li>不安全（所有的数据都在服务器上，只要服务器发生火灾，地震等不可抗力，最终数据全部丢失。）</li><li>….</li></ul></li></ul></li></ul></li><li>C/S和B/S结构的系统，哪个好，哪个不好？<ul><li>这个问题问的没有水平。并不是哪个好，哪个不好。不同结构的系统在不同的业务场景下有不同的适用场景。</li><li>娱乐性软件建议使用？<ul><li>C/S 结构</li></ul></li><li>公司内部使用的一些业务软件建议使用？<ul><li>公司内部使用的系统，需要维护成本低。</li><li>公司内部使用的系统，不需要很酷炫。</li><li>公司内部使用的企业级系统主要是能够进行数据的维护即可。</li><li>B/S 结构。</li></ul></li></ul></li><li>注意了：开发B/S结构的系统，其实就是开发网站，其实就是开发一个WEB系统。<ul><li>开发一个WEB系统你需要会哪些技术？<ul><li>WEB前端（运行在浏览器上的程序。）<ul><li>HTML</li><li>CSS</li><li>JavaScript</li></ul></li><li>WEB后端（WEB服务器端的程序。）<ul><li>Java可以（Java做WEB开发我们称为JavaWEB开发。JavaWEB开发最核心的规范：Servlet【Server Applet服务器端的Java小程序。】）</li><li>C语言也可以</li><li>C++也可以</li><li>Python也行</li><li>PHP也可以</li><li>….</li></ul></li></ul></li></ul></li><li>JavaEE是什么？<ul><li>Java包括三大块：<ul><li>JavaSE<ul><li>Java标准版（一套类库：别人写好的一套类库，只不过这个类库是标准类库，走EE，或者走ME，这个SE一定是基础，先学。）</li></ul></li><li>JavaEE（WEB方向，WEB系统。）<ul><li>Java企业版（也是一套类库：也是别人写好的一套类库，只不过这套类库可以帮助我们完成企业级项目的开发，专门为企业内部提供解决方案的一套（多套）类库。）</li><li>别人写好的，你用就行了，用它可以开发企业级项目。</li><li>可以开发web系统。</li><li>Java比较火爆的就是这个JavaEE方向。</li></ul></li><li>JavaME<ul><li>Java微型版（还是一套类库，只不过这套类库帮助我们进行电子微型设备内核程序的开发）</li><li>机顶盒内核程序，吸尘器内核程序，电冰箱内核程序，电饭煲内核程序。。。。。</li></ul></li></ul></li><li>JavaEE实际上包括很多种规范，13种规范，其中Servlet就是JavaEE规范之一。学Servlet还是Java语言。</li></ul></li></ol><h2 id="B-S结构的系统通信原理（没有涉及到Java小程序）"><a href="#B-S结构的系统通信原理（没有涉及到Java小程序）" class="headerlink" title="B/S结构的系统通信原理（没有涉及到Java小程序）"></a>B/S结构的系统通信原理（没有涉及到Java小程序）</h2><ul><li>WEB系统的访问过程<ul><li>第一步：打开浏览器</li><li>第二步：找到地址栏</li><li>第三步：输入一个合法的网址</li><li>第四步：回车</li><li>第五步：在浏览器上会展示响应的结果。</li></ul></li><li>关于域名：<ul><li><a href="https://www.baidu.com/">https://www.baidu.com/</a> （网址）</li><li>www.baidu.com 是一个域名</li><li>在浏览器地址栏上输入域名，回车之后，域名解析器会将域名解析出来一个具体的IP地址和端口号等。</li><li>解析结果也许是：<a href="http://110.242.68.3:80/index.html">http://110.242.68.3:80/index.html</a></li></ul></li><li>IP地址是啥？<ul><li>计算机在网络当中的一个身份证号。在同一个网络当中，IP地址是唯一的。</li><li>A计算机要想和B计算机通信，首先你需要知道B计算机的IP地址，有了IP地址才能建立连接。</li></ul></li><li>端口号是啥？<ul><li>一个端口代表一个软件（一个端口代表一个应用，一个端口仅代表一个服务）。</li><li>一个计算机当中有很多软件，每一个软件启动之后都有一个端口号。</li><li>在同一个计算机上，端口号具有唯一性。</li></ul></li><li>一个WEB系统的通信原理？通信步骤：<ul><li>第一步：用户输入网址（URL）</li><li>第二步：域名解析器进行域名解析：<a href="http://110.242.68.3:80/index.html">http://110.242.68.3:80/index.html</a></li><li>第三步：浏览器软件在网络中搜索110.242.68.3这一台主机，直到找到这台主机。</li><li>第四步：定位110.242.68.3这台主机上的服务器软件，因为是80端口，可以很轻松的定位到80端口对应的服务器软件。</li><li>第五步：80端口对应的服务器软件得知浏览器想要的资源名是：index.html</li><li>第六步：服务器软件找到index.html文件，并且将index.html文件中的内容直接输出响应到浏览器上。</li><li>第七步：浏览器接收到来自服务器的代码（HTML CSS JS）</li><li>第八步：浏览器渲染，执行HTML CSS JS代码，展示效果。</li></ul></li><li>什么是URL？<ul><li>统一资源定位符（<a href="http://www.baidu.com）">http://www.baidu.com）</a></li></ul></li><li>什么是请求，什么是响应？<ul><li>请求和响应实际上说的是数据的流向不同。</li><li>从Browser端发送数据到Server端，我们称为请求。英语单词：request</li><li>从Server端向浏览器Browser端发送数据，我们称为响应。英语单词：response</li><li>B —&gt; S （请求request）</li><li>S —&gt; B （响应response）</li></ul></li></ul><h2 id="关于WEB服务器软件"><a href="#关于WEB服务器软件" class="headerlink" title="关于WEB服务器软件"></a>关于WEB服务器软件</h2><ul><li>WEB服务器软件都有哪些呢？（这些软件都是提前开发好的。）<ul><li>Tomcat（WEB服务器）</li><li>jetty（WEB服务器）</li><li>JBOSS（应用服务器）</li><li>WebLogic（应用服务器）</li><li>WebSphere（应用服务器）</li></ul></li><li>应用服务器和WEB服务器的关系？<ul><li>应用服务器实现了JavaEE的所有规范。(JavaEE有13个不同的规范。)</li><li>WEB服务器只实现了JavaEE中的Servlet + JSP两个核心的规范。</li><li>通过这个讲解说明了：应用服务器是包含WEB服务器的。</li><li>用过JBOSS服务器的同学应该很清楚，JBOSS中内嵌了一个Tomcat服务器。</li></ul></li><li>Tomcat下载<ul><li>apache官网地址：<a href="https://www.apache.org/">https://www.apache.org/</a></li><li>tomcat官网地址：<a href="https://tomcat.apache.org">https://tomcat.apache.org</a></li><li>tomcat开源免费的轻量级WEB服务器。</li><li>tomcat还有另外一个名字：catalina（catalina是美国的一个岛屿，风景秀丽，据说作者是在这个风景秀丽的小岛上开发了一个轻量级的WEB服务器，体积小，运行速度快，因此tomcat又被称为catalina）</li><li>tomcat的logo是一只公猫（寓意表示Tomcat服务器是轻巧的，小巧的，果然，体积小，运行速度快，只实现了Servlet+JSP规范）</li><li>tomcat是java语言写的。</li><li>tomcat服务器要想运行，必须先又jre（Java的运行时环境）</li></ul></li><li>Tomcat服务器要想运行，需要先有jre，所以要先安装JDK，配置java运行环境。<ul><li>JAVA_HOME=C:\Program Files\Java\jdk-17.0.1</li><li>PATH=%JAVA_HOME%\bin</li><li>目前JAVA_HOME没有配置，思考一个问题，这样行不行呢？目前只运行java程序是没问题的。真的没问题吗？</li></ul></li><li>Tomcat服务器的安装：<ul><li>绿色版本的安装很简单，直接zip包解压即可。解压就是安装。</li><li>我有一个好习惯，在C盘的根目录下新建一个dev目录，java开发所有相关的工具都安装到dev目录下，这样比较方便管理。（你随意）</li><li>启动Tomcat<ul><li>bin目录下有一个文件：startup.bat,通过它可以启动Tomcat服务器。<ul><li>xxx.bat文件是个什么文件？bat文件是windows操作系统专用的，bat文件是批处理文件，这种文件中可以编写大量的windows的dos命令，然后执行bat文件就相当于批量的执行dos命令。</li><li>startup.sh，这个文件在windows当中无法执行，在Linux环境当中可以使用。在Linux环境下能够执行的是shell命令，大量的shell命令编写在shell文件当中，然后执行这个shell文件可以批量的执行shell命令。</li><li>tomcat服务器提供了bat和sh文件，说明了这个tomcat服务器的通用性。</li><li>分析startup.bat文件得出，执行这个命令，实际上最后是执行：catalina.bat文件。</li><li>catalina.bat文件中有这样一行配置：MAINCLASS=org.apache.catalina.startup.Bootstrap （这个类就是main方法所在的类。）</li><li>tomcat服务器就是Java语言写的，既然是java语言写的，那么启动Tomcat服务器就是执行main方法。</li></ul></li><li>我们尝试打开dos命令窗口，在dos命令窗口中输入startup.bat来启动tomcat服务器。</li><li>启动Tomcat服务器只配置path对应的bin目录是不行的。有两个环境变量需要配置：<ul><li>JAVA_HOME=JDK的根</li><li>CATALINA_HOME=Tomcat服务器的根</li></ul></li></ul></li></ul></li><li><p>关于Tomcat服务器的目录</p><ul><li>bin ： 这个目录是Tomcat服务器的命令文件存放的目录，比如：启动Tomcat，关闭Tomcat等。</li><li>conf： 这个目录是Tomcat服务器的配置文件存放目录。（server.xml文件中可以配置端口号，默认Tomcat端口是8080）</li><li>lib ：这个目录是Tomcat服务器的核心程序目录，因为Tomcat服务器是Java语言编写的，这里的jar包里面都是class文件。</li><li>logs: Tomcat服务器的日志目录，Tomcat服务器启动等信息都会在这个目录下生成日志文件。</li><li>temp：Tomcat服务器的临时目录。存储临时文件。</li><li>webapps：这个目录当中就是用来存放大量的webapp（web application：web应用）</li><li>work：这个目录是用来存放JSP文件翻译之后的java文件以及编译之后的class文件。</li></ul></li><li><p>配置Tomcat服务器需要哪些环境变量？</p><ul><li>JAVA_HOME=JDK的根</li><li>CATALINA_HOME=Tomcat服务器的根</li><li>PATH=%JAVA_HOME%\bin;%CATALINA_HOME%\bin</li></ul></li><li>启动Tomcat： startup</li><li><p>关闭Tomcat：stop （shutdown.bat文件重命名为stop.bat，为什么？原因是shutdown命令和windows中的关机命令冲突。所以修改一下。）</p></li><li><p>怎么测试Tomcat服务器有没有启动成功呢？</p><ul><li>打开浏览器，在浏览器的地址栏上输入URL即可：<ul><li><a href="http://ip地址:端口号">http://ip地址:端口号</a></li><li>ip地址是什么？端口号我知道，是8080</li><li>本机的IP地址是：127.0.0.1，或者是localhost，都行。</li></ul></li></ul></li></ul><h2 id="实现一个最基本的web应用（这个web应用中没有java小程序）"><a href="#实现一个最基本的web应用（这个web应用中没有java小程序）" class="headerlink" title="实现一个最基本的web应用（这个web应用中没有java小程序）"></a>实现一个最基本的web应用（这个web应用中没有java小程序）</h2><ul><li><p>第一步：找到CATALINA_HOME\webapps目录</p><ul><li>因为所有的webapp要放到webapps目录下。（没有为什么，这是Tomcat服务器的要求。如果不放到这里，Tomcat服务器找不到你的应用。）</li></ul></li><li><p>第二步：在CATALINA_HOME\webapps目录下新建一个子目录，起名：oa</p><ul><li>这个目录名oa就是你这个webapp的名字。</li></ul></li><li><p>第三步：在oa目录下新建资源文件，例如：index.html</p><ul><li>编写index.html文件的内容。</li></ul></li><li><p>第四步：启动Tomcat服务器</p></li><li><p>第五步：打开浏览器，在浏览器地址栏上输入这样的URL：</p><ul><li><a href="http://127.0.0.1:8080/oa/index.html">http://127.0.0.1:8080/oa/index.html</a></li></ul></li><li><p>思考一个问题：</p><ul><li><p>我们在浏览器上直接输入一个URL，然后回车。这个动作和超链接一样吗？既然是一样的，我们完全可以使用超链接。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--注意以下的路径，以/开始，带项目名，是一个绝对路径。不需要添加：http://127.0.0.1:8080--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;/oa/login.html&quot;</span>&gt;</span>user login2<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--多个层级也没有关系，正常访问即可。--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--注意：我们目前前端上的路径都以“/”开始的，都是加项目名的。--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;/oa/test/debug/d.html&quot;</span>&gt;</span>d page<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul></li></ul><ul><li><a href="http://127.0.0.1:8080/oa/userList.html">http://127.0.0.1:8080/oa/userList.html</a> <ul><li>访问这个地址，可以展示一个用户列表页面。但是这个用户列表页面是写死在HTML文件当中的。这种资源我们称为静态资源。怎么能变成动态资源。显然需要连接数据库。</li><li>连接数据库需要JDBC程序，也就是说需要编写Java程序连接数据库，数据库中有多少条记录，页面上就显示多少条记录，这种技术被称为动态网页技术。（动态网页技术并不是说页面中有flash动画。动态网页技术是说页面中的数据是动态的，根据数据库中数据的变化而变化。）</li></ul></li></ul><h2 id="对于一个动态的web应用来说，一个请求和响应的过程有多少个角色参与，角色和角色之间有多少个协议"><a href="#对于一个动态的web应用来说，一个请求和响应的过程有多少个角色参与，角色和角色之间有多少个协议" class="headerlink" title="对于一个动态的web应用来说，一个请求和响应的过程有多少个角色参与，角色和角色之间有多少个协议"></a>对于一个动态的web应用来说，一个请求和响应的过程有多少个角色参与，角色和角色之间有多少个协议</h2><p><img src="D:\course\01-Servlet\文档\BS结构系统的通信原理2.png" alt="BS结构系统的通信原理2"></p><ul><li>有哪些角色（在整个BS结构的系统当中，有哪些人参与进去了）<ul><li>浏览器软件的开发团队（浏览器软件太多了：谷歌浏览器、火狐浏览器、IE浏览器….）</li><li>WEB Server的开发团队（WEB Server这个软件也是太多了：Tomcat、Jetty、WebLogic、JBOSS、WebSphere….）</li><li>DB Server的开发团队（DB Server这个软件也是太多了：Oracle、MySQL…..）</li><li>webapp的开发团队（WEB应用是我们做为JavaWEB程序员开发的）</li></ul></li><li>角色和角色之间需要遵守哪些规范，哪些协议<ul><li>webapp的开发团队   和    WEB Server的开发团队  之间有一套规范: JavaEE规范之一Servlet规范。<ul><li>Servlet规范的作用是什么？<ul><li>WEB Server   和   webapp解耦合。</li></ul></li></ul></li><li>Browser  和   WebServer之间有一套传输协议：HTTP协议。（超文本传输协议。）</li><li>webapp开发团队  和  DB Server的开发团队之间有一套规范：JDBC规范。</li></ul></li></ul><p><img src="D:\course\01-Servlet\文档\BS结构系统的角色和协议.png" alt="BS结构系统的角色和协议"></p><ul><li>Servlet规范是一个什么规范？<ul><li>遵循Servlet规范的webapp，这个webapp就可以放在不同的WEB服务器中运行。（因为这个webapp是遵循Servlet规范的。）</li><li>Servlet规范包括什么呢？<ul><li>规范了哪些接口</li><li>规范了哪些类</li><li>规范了一个web应用中应该有哪些配置文件</li><li>规范了一个web应用中配置文件的名字</li><li>规范了一个web应用中配置文件存放的路径</li><li>规范了一个web应用中配置文件的内容</li><li>规范了一个合法有效的web应用它的目录结构应该是怎样的。</li><li>…..</li></ul></li></ul></li></ul><h2 id="开发一个带有Servlet（Java小程序）的webapp（重点）"><a href="#开发一个带有Servlet（Java小程序）的webapp（重点）" class="headerlink" title="开发一个带有Servlet（Java小程序）的webapp（重点）"></a>开发一个带有Servlet（Java小程序）的webapp（重点）</h2><ul><li><p>开发步骤是怎样的？</p><ul><li><p>第一步：在webapps目录下新建一个目录，起名crm（这个crm就是webapp的名字）。当然，也可以是其它项目，比如银行项目，可以创建一个目录bank，办公系统可以创建一个oa。</p><ul><li>注意：crm就是这个webapp的根</li></ul></li><li><p>第二步：在webapp的根下新建一个目录：WEB-INF</p><ul><li>注意：这个目录的名字是Servlet规范中规定的，必须全部大写，必须一模一样。必须的必须。</li></ul></li><li><p>第三步：在WEB-INF目录下新建一个目录：classes</p><ul><li>注意：这个目录的名字必须是全部小写的classes。这也是Servlet规范中规定的。另外这个目录下一定存放的是Java程序编译之后的class文件（这里存放的是字节码文件）。</li></ul></li><li><p>第四步：在WEB-INF目录下新建一个目录：lib</p><ul><li>注意：这个目录不是必须的。但如果一个webapp需要第三方的jar包的话，这个jar包要放到这个lib目录下，这个目录的名字也不能随意编写，必须是全部小写的lib。例如java语言连接数据库需要数据库的驱动jar包。那么这个jar包就一定要放到lib目录下。这Servlet规范中规定的。</li></ul></li><li><p>第五步：在WEB-INF目录下新建一个文件：web.xml</p><ul><li><p>注意：这个文件是必须的，这个文件名必须叫做web.xml。这个文件必须放在这里。一个合法的webapp，web.xml文件是必须的，这个web.xml文件就是一个配置文件，在这个配置文件中描述了请求路径和Servlet类之间的对照关系。</p></li><li><p>这个文件最好从其他的webapp中拷贝，最好别手写。没必要。复制粘贴</p></li><li><p>```xml<br>&lt;?xml version=”1.0” encoding=”UTF-8”?&gt;</p><web-app xmlns="https://jakarta.ee/xml/ns/jakartaee"  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"  xsi:schemaLocation="https://jakarta.ee/xml/ns/jakartaee                      https://jakarta.ee/xml/ns/jakartaee/web-app_5_0.xsd"  version="5.0"  metadata-complete="true"></li></ul></li></ul></li></ul><pre><code>  &lt;/web-app&gt;  <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">- 第六步：编写一个Java程序，这个小Java程序也不能随意开发，这个小java程序必须实现Servlet接口。</span><br><span class="line"></span><br><span class="line">  - 这个Servlet接口不在JDK当中。（因为Servlet不是JavaSE了。Servlet属于JavaEE，是另外的一套类库。）</span><br><span class="line">  - Servlet接口（Servlet.class文件）是Oracle提供的。（最原始的是sun公司提供的。）</span><br><span class="line">  - Servlet接口是JavaEE的规范中的一员。</span><br><span class="line">  - Tomcat服务器实现了Servlet规范，所以Tomcat服务器也需要使用Servlet接口。Tomcat服务器中应该有这个接口，Tomcat服务器的CATALINA_HOME\lib目录下有一个servlet-api.jar，解压这个servlet-api.jar之后，你会看到里面有一个Servlet.class文件。</span><br><span class="line">  - 重点：从JakartaEE9开始，Servlet接口的全名变了：jakarta.servlet.Servlet</span><br><span class="line">  - 注意：编写这个Java小程序的时候，java源代码你愿意在哪里就在哪里，位置无所谓，你只需要将java源代码编译之后的class文件放到classes目录下即可。</span><br><span class="line"></span><br><span class="line">- 第七步：编译我们编写的HelloServlet</span><br><span class="line"></span><br><span class="line">  - 重点：你怎么能让你的HelloServlet编译通过呢？配置环境变量CLASSPATH</span><br><span class="line"></span><br><span class="line">    CLASSPATH=.;C:\dev\apache-tomcat-10.0.12\lib\servlet-api.jar</span><br><span class="line"></span><br><span class="line">  - 思考问题：以上配置的CLASSPATH和Tomcat服务器运行有没有关系？</span><br><span class="line"></span><br><span class="line">    - 没有任何关系，以上配置这个环境变量只是为了让你的HelloServlet能够正常编译生成class文件。</span><br><span class="line"></span><br><span class="line">- 第八步：将以上编译之后的HelloServlet.class文件拷贝到WEB-INF\classes目录下。</span><br><span class="line"></span><br><span class="line">- 第九步：在web.xml文件中编写配置信息，让“请求路径”和“Servlet类名”关联在一起。</span><br><span class="line"></span><br><span class="line">  - 这一步用专业术语描述：在web.xml文件中注册Servlet类。</span><br><span class="line"></span><br><span class="line">  - ```xml</span><br><span class="line">    &lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><span class="line">    </span><br><span class="line">    &lt;web-app xmlns=&quot;https://jakarta.ee/xml/ns/jakartaee&quot;</span><br><span class="line">      xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span><br><span class="line">      xsi:schemaLocation=&quot;https://jakarta.ee/xml/ns/jakartaee</span><br><span class="line">                          https://jakarta.ee/xml/ns/jakartaee/web-app_5_0.xsd&quot;</span><br><span class="line">      version=&quot;5.0&quot;</span><br><span class="line">      metadata-complete=&quot;true&quot;&gt;</span><br><span class="line">    </span><br><span class="line">    &lt;!--servlet描述信息--&gt;</span><br><span class="line">    &lt;!--任何一个servlet都对应一个servlet-mapping --&gt;</span><br><span class="line">    &lt;servlet&gt;</span><br><span class="line">    &lt;servlet-name&gt;fdsafdsagfdsafdsa&lt;/servlet-name&gt;</span><br><span class="line">    &lt;!--这个位置必须是带有包名的全限定类名--&gt;</span><br><span class="line">    &lt;servlet-class&gt;com.bjpowernode.servlet.HelloServlet&lt;/servlet-class&gt;</span><br><span class="line">    &lt;/servlet&gt;</span><br><span class="line">    </span><br><span class="line">    &lt;!--servlet映射信息--&gt;</span><br><span class="line">    &lt;servlet-mapping&gt;</span><br><span class="line">    &lt;!--这个也是随便的，不过这里写的内容要和上面的一样。--&gt;</span><br><span class="line">    &lt;servlet-name&gt;fdsafdsagfdsafdsa&lt;/servlet-name&gt;</span><br><span class="line">    &lt;!--这里需要一个路径--&gt;</span><br><span class="line">    &lt;!--这个路径唯一的要求是必须以 / 开始--&gt;</span><br><span class="line">    &lt;!--当前这个路径可以随便写--&gt;</span><br><span class="line">    &lt;url-pattern&gt;/fdsa/fd/saf/d/sa/fd/sa/fd&lt;/url-pattern&gt;</span><br><span class="line">    &lt;/servlet-mapping&gt;</span><br><span class="line">    </span><br><span class="line">    &lt;/web-app&gt;</span><br><span class="line">    </span><br></pre></td></tr></table></figure></code></pre><ul><li><p>第十步：启动Tomcat服务器</p></li><li><p>第十一步：打开浏览器，在浏览器地址栏上输入一个url，这个URL必须是：</p><ul><li><a href="http://127.0.0.1:8080/crm/fdsa/fd/saf/d/sa/fd/sa/fd">http://127.0.0.1:8080/crm/fdsa/fd/saf/d/sa/fd/sa/fd</a>   </li><li>非常重要的一件事：浏览器上的请求路径不能随便写，这个请求路径必须和web.xml文件中的url-pattern一致。</li><li>注意：浏览器上的请求路径和web.xml文件中的url-pattern的唯一区别就是：浏览器上的请求路径带项目名：/crm</li></ul></li><li><p>浏览器上编写的路径太复杂，可以使用超链接。（<strong>非常重要：html页面只能放到WEB-INF目录外面。</strong>）</p></li><li><p>以后不需要我们编写main方法了。tomcat服务器负责调用main方法，Tomcat服务器启动的时候执行的就是main方法。我们javaweb程序员只需要编写Servlet接口的实现类，然后将其注册到web.xml文件中，即可。</p></li><li><p>总结一下：一个合法的webapp目录结构应该是怎样的？</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">webapproot</span><br><span class="line">     |------WEB-INF</span><br><span class="line">       |------classes(存放字节码)</span><br><span class="line">       |------lib(第三方jar包)</span><br><span class="line">       |------web.xml(注册Servlet)</span><br><span class="line">     |------html</span><br><span class="line">     |------css</span><br><span class="line">     |------javascript</span><br><span class="line">     |------image</span><br><span class="line">     ....</span><br></pre></td></tr></table></figure></li><li><p>浏览器发送请求，到最终服务器调用Servlet中的方法，是怎样的一个过程？（以下这个过程描述的很粗糙。其中还有很多步骤我省略了。）</p><ul><li>用户输入URL，或者直接点击超链接：<a href="http://127.0.0.1:8080/crm/fdsa/fd/saf/d/sa/fd/sa/fd">http://127.0.0.1:8080/crm/fdsa/fd/saf/d/sa/fd/sa/fd</a>  </li><li>然后Tomcat服务器接收到请求，截取路径：/crm/fdsa/fd/saf/d/sa/fd/sa/fd  </li><li>Tomcat服务器找到crm项目</li><li>Tomcat服务器在web.xml文件中查找/fdsa/fd/saf/d/sa/fd/sa/fd  对应的Servlet是：com.bjpowernode.servlet.HelloServlet</li><li>Tomcat服务器通过反射机制，创建com.bjpowernode.servlet.HelloServlet的对象。</li><li>Tomcat服务器调用com.bjpowernode.servlet.HelloServlet对象的service方法。</li></ul></li></ul><h2 id="关于JavaEE的版本"><a href="#关于JavaEE的版本" class="headerlink" title="关于JavaEE的版本"></a>关于JavaEE的版本</h2><ul><li>JavaEE目前最高版本是 JavaEE8</li><li>JavaEE被Oracle捐献了，Oracle将JavaEE规范捐献给Apache了。</li><li>Apache把JavaEE换名了，以后不叫JavaEE了，以后叫做 jakarta EE。</li><li>以后没有JavaEE了。以后都叫做Jakarta EE。</li><li>JavaEE8版本升级之后的”JavaEE 9”，不再是”JavaEE9”这个名字了，叫做JakartaEE9</li><li>JavaEE8的时候对应的Servlet类名是：javax.servlet.Servlet</li><li>JakartaEE9的时候对应的Servlet类名是：jakarta.servlet.Servlet （包名都换了）</li><li>如果你之前的项目还是在使用javax.servlet.Servlet，那么你的项目无法直接部署到Tomcat10+版本上。你只能部署到Tomcat9-版本上。在Tomcat9以及Tomcat9之前的版本中还是能够识别javax.servlet这个包。</li></ul><h2 id="解决Tomcat服务器在DOS命令窗口中的乱码问题（控制台乱码）"><a href="#解决Tomcat服务器在DOS命令窗口中的乱码问题（控制台乱码）" class="headerlink" title="解决Tomcat服务器在DOS命令窗口中的乱码问题（控制台乱码）"></a>解决Tomcat服务器在DOS命令窗口中的乱码问题（控制台乱码）</h2><p>将CATALINA_HOME/conf/logging.properties文件中的内容修改如下：</p><p>java.util.logging.ConsoleHandler.encoding = GBK</p><h2 id="向浏览器响应一段HTML代码"><a href="#向浏览器响应一段HTML代码" class="headerlink" title="向浏览器响应一段HTML代码"></a>向浏览器响应一段HTML代码</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">service</span><span class="params">(ServletRequest request, ServletResponse response)</span>&#123;</span><br><span class="line">    response.setContentType(<span class="string">&quot;text/html&quot;</span>);</span><br><span class="line">    <span class="type">PrintWriter</span> <span class="variable">out</span> <span class="operator">=</span> response.getWriter();</span><br><span class="line">    out.print(<span class="string">&quot;&lt;h1&gt;hello servlet!&lt;/h1&gt;&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="在Servlet中连接数据库，怎么做？"><a href="#在Servlet中连接数据库，怎么做？" class="headerlink" title="在Servlet中连接数据库，怎么做？"></a>在Servlet中连接数据库，怎么做？</h2><ul><li>Servlet是Java程序，所以在Servlet中完全可以编写JDBC代码连接数据库。</li><li>在一个webapp中去连接数据库，需要将驱动jar包放到WEB-INF/lib目录下。（com.mysql.cj.jdbc.Driver 这个类就在驱动jar包当中。）</li></ul><h2 id="在集成开发环境当中开发Servlet程序"><a href="#在集成开发环境当中开发Servlet程序" class="headerlink" title="在集成开发环境当中开发Servlet程序"></a>在集成开发环境当中开发Servlet程序</h2><ul><li><p>集成开发工具很多，其中目前使用比较多的是：</p><ul><li>IntelliJ IDEA（这个居多，IDEA在提示功能方面要强于Eclipse，也就是说IDEA使用起来比Eclipse更加智能，更好用。JetBrain公司开发的。收费的。）</li><li>Eclipse（这个少一些），Eclipse目前还是有团队使用，只不过处于减少的趋势，自己从事工作之后，可能会遇到。Eclipse是IBM团队开发的。Eclipse寓意是“日食”。“日食”表示将太阳吃掉。太阳是SUN。IBM团队开发Eclipse的寓意是吞并SUN公司，但是2009年的时候SUN公司被Oracle公司并购了。IBM并没有成功并购SUN公司。</li></ul></li><li><p>使用IDEA集成开发工具开发Servlet</p><ul><li>第一步：New Project（我比较习惯先创建一个Empty Project【空工程】，然后在空工程下新建Module【模块】，这不是必须的，只是一种习惯，你可以直接新建非空的Project），这个Empty Project起名为：javaweb（不是必须的，只是一个名字而已。一般情况下新建的Project的名字最好和目录的名字一致。）</li><li>第二步：新建模块（File —&gt; new —&gt; Module…）<ul><li>这里新建的是一个普通的JavaSE模块（这里先不要新建Java Enterprise模块）</li><li>这个Module自动会被放在javaweb的project下面。</li><li>这个Module起名：servlet01</li></ul></li><li>第三步：让Module变成JavaEE的模块。（让Module变成webapp的模块。符合webapp规范。符合Servlet规范的Module）<ul><li>在Module上点击右键：Add Framework Support…（添加框架支持）</li><li>在弹出的窗口中，选择Web Application（选择的是webapp的支持）</li><li>选择了这个webapp的支持之后，IDEA会自动给你生成一个符合Servlet规范的webpp目录结构。</li><li><strong>重点，需要注意的：在IDEA工具中根据Web Application模板生成的目录中有一个web目录，这个目录就代表webapp的根</strong></li></ul></li><li>第四步（非必须）：根据Web Application生成的资源中有index.jsp文件，这里我选择删除这个index.jsp文件。</li><li>第五步：编写Servlet（StudentServlet）<ul><li>class StudentServlet implements Servlet</li><li>这个时候发现Servlet.class文件没有。怎么办？将CATALINA_HOME/lib/servlet-api.jar和jsp-api.jar添加到classpath当中（这里的classpath说的是IDEA的classpath）<ul><li>File —&gt; Project Structrue —&gt; Modules —&gt; + 加号 —&gt; Add JARS….</li></ul></li><li>实现jakarta.servlet.Servlet接口中的5个方法。</li></ul></li><li>第六步：在Servlet当中的service方法中编写业务代码（我们这里连接数据库了。）</li><li>第七步：在WEB-INF目录下新建了一个子目录：lib（这个目录名可不能随意，必须是全部小写的lib），并且将连接数据库的驱动jar包放到lib目录下。</li><li>第八步：在web.xml文件中完成StudentServlet类的注册。（请求路径和Servlet之间对应起来）</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span><br><span class="line">&lt;web-app xmlns=<span class="string">&quot;http://xmlns.jcp.org/xml/ns/javaee&quot;</span></span><br><span class="line">         xmlns:xsi=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span><br><span class="line">         xsi:schemaLocation=<span class="string">&quot;http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_4_0.xsd&quot;</span></span><br><span class="line">         version=<span class="string">&quot;4.0&quot;</span>&gt;</span><br><span class="line"></span><br><span class="line">    &lt;servlet&gt;</span><br><span class="line">        &lt;servlet-name&gt;studentServlet&lt;/servlet-name&gt;</span><br><span class="line">        &lt;servlet-class&gt;com.bjpowernode.javaweb.servlet.StudentServlet&lt;/servlet-class&gt;</span><br><span class="line">    &lt;/servlet&gt;</span><br><span class="line">    &lt;servlet-mapping&gt;</span><br><span class="line">        &lt;servlet-name&gt;studentServlet&lt;/servlet-name&gt;</span><br><span class="line">        &lt;url-pattern&gt;/servlet/student&lt;/url-pattern&gt;</span><br><span class="line">    &lt;/servlet-mapping&gt;</span><br><span class="line">    </span><br><span class="line">&lt;/web-app&gt;</span><br></pre></td></tr></table></figure></li></ul><ul><li><p>第九步：给一个html页面，在HTML页面中编写一个超链接，用户点击这个超链接，发送请求，Tomcat执行后台的StudentServlet。</p><ul><li><p>student.html</p></li><li><p>这个文件不能放到WEB-INF目录里面，只能放到WEB-INF目录外面。</p></li><li><p>student.html文件的内容</p></li><li><p>```html<br>&lt;!DOCTYPE html&gt;<br><html lang="en"><br><head></p><pre><code>&lt;meta charset=&quot;UTF-8&quot;&gt;&lt;title&gt;student page&lt;/title&gt;</code></pre><p>&lt;/head&gt;<br><body></p><pre><code>&lt;!--这里的项目名是 /xmm ，无法动态获取，先写死--&gt;&lt;a href=&quot;/xmm/servlet/student&quot;&gt;student list&lt;/a&gt;</code></pre><p>&lt;/body&gt;<br>&lt;/html&gt;</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">      </span><br><span class="line"></span><br><span class="line">  - 第十步：让IDEA工具去关联Tomcat服务器。关联的过程当中将webapp部署到Tomcat服务器当中。</span><br><span class="line"></span><br><span class="line">    - IDEA工具右上角，绿色小锤子右边有一个：Add Configuration</span><br><span class="line">    - 左上角加号，点击Tomcat Server --&gt; local</span><br><span class="line">    - 在弹出的界面中设置服务器Server的参数（基本上不用动）</span><br><span class="line">    - 在当前窗口中有一个Deployment（点击这个用来部署webapp），继续点击加号，部署即可。</span><br><span class="line">    - 修改 Application context为：/xmm</span><br><span class="line"></span><br><span class="line">  - 第十一步：启动Tomcat服务器</span><br><span class="line"></span><br><span class="line">    - 在右上角有绿色的箭头，或者绿色的小虫子，点击这个绿色的小虫子，可以采用debug的模式启动Tomcat服务器。</span><br><span class="line">    - 我们开发中建议适用debug模式启动Tomcat</span><br><span class="line"></span><br><span class="line">  - 第十二步：打开浏览器，在浏览器地址栏上输入：http://localhost:8080/xmm/student.html</span><br><span class="line"></span><br><span class="line">## Servlet对象的生命周期</span><br><span class="line"></span><br><span class="line">- 什么是Servlet对象生命周期？</span><br><span class="line"></span><br><span class="line">  - Servlet对象什么时候被创建。</span><br><span class="line">  - Servlet对象什么时候被销毁。</span><br><span class="line">  - Servlet对象创建了几个？</span><br><span class="line">  - Servlet对象的生命周期表示：一个Servlet对象从出生在最后的死亡，整个过程是怎样的。</span><br><span class="line"></span><br><span class="line">- Servlet对象是由谁来维护的？</span><br><span class="line"></span><br><span class="line">  - Servlet对象的创建，对象上方法的调用，对象最终的销毁，Javaweb程序员是无权干预的。</span><br><span class="line">  - Servlet对象的生命周期是由Tomcat服务器（WEB Server）全权负责的。</span><br><span class="line">  - Tomcat服务器通常我们又称为：WEB容器。（这个叫法你要知道【WEB Container】）</span><br><span class="line">  - WEB容器来管理Servlet对象的死活。</span><br><span class="line"></span><br><span class="line">- 思考：我们自己new的Servlet对象受WEB容器的管理吗？</span><br><span class="line"></span><br><span class="line">  - 我们自己new的Servlet对象是不受WEB容器管理的。</span><br><span class="line">  - WEB容器创建的Servlet对象，这些Servlet对象都会被放到一个集合当中（HashMap），只有放到这个HashMap集合中的Servlet才能够被WEB容器管理，自己new的Servlet对象不会被WEB容器管理。（自己new的Servlet对象不在容器当中）</span><br><span class="line">  - web容器底层应该有一个HashMap这样的集合，在这个集合当中存储了Servlet对象和请求路径之间的关系</span><br><span class="line">  - ![WEB容器中的Map集合](D:\course\01-Servlet\文档\WEB容器中的Map集合.png)</span><br><span class="line"></span><br><span class="line">- 研究：服务器在启动的Servlet对象有没有被创建出来（默认情况下）？</span><br><span class="line"></span><br><span class="line">  - 在Servlet中提供一个无参数的构造方法，启动服务器的时候看看构造方法是否执行。</span><br><span class="line">  - 经过测试得出结论：默认情况下，服务器在启动的时候Servlet对象并不会被实例化。</span><br><span class="line">  - 这个设计是合理的。用户没有发送请求之前，如果提前创建出来所有的Servlet对象，必然是耗费内存的，并且创建出来的Servlet如果一直没有用户访问，显然这个Servlet对象是一个废物，没必要先创建。</span><br><span class="line"></span><br><span class="line">- 怎么让服务器启动的时候创建Servlet对象呢？</span><br><span class="line"></span><br><span class="line">  - 在servlet标签中添加&lt;load-on-startup&gt;子标签，在该子标签中填写整数，越小的整数优先级越高。</span><br><span class="line"></span><br><span class="line">  - ```xml</span><br><span class="line">    &lt;servlet&gt;</span><br><span class="line">        &lt;servlet-name&gt;aservlet&lt;/servlet-name&gt;</span><br><span class="line">        &lt;servlet-class&gt;com.bjpowernode.javaweb.servlet.AServlet&lt;/servlet-class&gt;</span><br><span class="line">        &lt;load-on-startup&gt;1&lt;/load-on-startup&gt;</span><br><span class="line">    &lt;/servlet&gt;</span><br><span class="line">    &lt;servlet-mapping&gt;</span><br><span class="line">        &lt;servlet-name&gt;aservlet&lt;/servlet-name&gt;</span><br><span class="line">        &lt;url-pattern&gt;/a&lt;/url-pattern&gt;</span><br><span class="line">    &lt;/servlet-mapping&gt;</span><br></pre></td></tr></table></figure></li></ul></li></ul><ul><li><p>Servlet对象生命周期</p><ul><li><p>默认情况下服务器启动的时候AServlet对象并没有被实例化</p></li><li><p>用户发送第一次请求的时候，控制台输出了以下内容：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">AServlet无参数构造方法执行了</span><br><span class="line">AServlet&#x27;s init method execute!</span><br><span class="line">AServlet&#x27;s service method execute!</span><br></pre></td></tr></table></figure></li><li><p>根据以上输出内容得出结论：</p><ul><li>用户在发送第一次请求的时候Servlet对象被实例化（AServlet的构造方法被执行了。并且执行的是无参数构造方法。）</li><li>AServlet对象被创建出来之后，Tomcat服务器马上调用了AServlet对象的init方法。（init方法在执行的时候，AServlet对象已经存在了。已经被创建出来了。）</li><li>用户发送第一次请求的时候，init方法执行之后，Tomcat服务器马上调用AServlet对象的service方法。</li></ul></li><li><p>用户继续发送第二次请求，控制台输出了以下内容：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">AServlet&#x27;s service method execute!</span><br></pre></td></tr></table></figure></li><li><p>根据以上输出结果得知，用户在发送第二次，或者第三次，或者第四次请求的时候，Servlet对象并没有新建，还是使用之前创建好的Servlet对象，直接调用该Servlet对象的service方法，这说明：</p><ul><li>第一：Servlet对象是单例的（单实例的。但是要注意：Servlet对象是单实例的，但是Servlet类并不符合单例模式。我们称之为假单例。之所以单例是因为Servlet对象的创建我们javaweb程序员管不着，这个对象的创建只能是Tomcat来说了算，Tomcat只创建了一个，所以导致了单例，但是属于假单例。真单例模式，构造方法是私有化的。）</li><li>第二：无参数构造方法、init方法只在第一次用户发送请求的时候执行。也就是说无参数构造方法只执行一次。init方法也只被Tomcat服务器调用一次。</li><li>第三：只要用户发送一次请求：service方法必然会被Tomcat服务器调用一次。发送100次请求，service方法会被调用100次。</li></ul></li><li><p>关闭服务器的时候，控制台输出了以下内容：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">AServlet&#x27;s destroy method execute!</span><br></pre></td></tr></table></figure></li><li><p>通过以上输出内容，可以得出以下结论：</p><ul><li>Servlet的destroy方法只被Tomcat服务器调用一次。</li><li>destroy方法是在什么时候被调用的？<ul><li>在服务器关闭的时候。</li><li>因为服务器关闭的时候要销毁AServlet对象的内存。</li><li>服务器在销毁AServlet对象内存之前，Tomcat服务器会自动调用AServlet对象的destroy方法。</li></ul></li></ul></li><li><p>请问：destroy方法调用的时候，对象销毁了还是没有销毁呢？</p><ul><li>destroy方法执行的时候AServlet对象还在，没有被销毁。destroy方法执行结束之后，AServlet对象的内存才会被Tomcat释放。</li></ul></li><li><p>Servlet对象更像一个人的一生：</p><ul><li>Servlet的无参数构造方法执行：标志着你出生了。</li><li>Servlet对象的init方法的执行：标志着你正在接受教育。</li><li>Servlet对象的service方法的执行：标志着你已经开始工作了，已经开始为人类提供服务了。</li><li>Servlet对象的destroy方法的执行：标志着临终。有什么遗言，抓紧的。要不然，来不及了。</li></ul></li><li><p>关于Servlet类中方法的调用次数？</p><ul><li>构造方法只执行一次。</li><li>init方法只执行一次。</li><li>service方法：用户发送一次请求则执行一次，发送N次请求则执行N次。</li><li>destroy方法只执行一次。</li></ul></li><li><p>当我们Servlet类中编写一个有参数的构造方法，如果没有手动编写无参数构造方法会出现什么问题？</p><ul><li>报错了：500错误。</li><li>注意：500是一个HTTP协议的错误状态码。</li><li>500一般情况下是因为服务器端的Java程序出现了异常。（服务器端的错误都是500错误：服务器内部错误。）</li><li>如果没有无参数的构造方法，会导致出现500错误，无法实例化Servlet对象。</li><li>所以，一定要注意：在Servlet开发当中，不建议程序员来定义构造方法，因为定义不当，一不小心就会导致无法实例化Servlet对象。</li></ul></li><li><p>思考：Servlet的无参数构造方法是在对象第一次创建的时候执行，并且只执行一次。init方法也是在对象第一次创建的时候执行，并且只执行一次。那么这个无参数构造方法可以代替掉init方法吗？</p><ul><li>不能。</li><li>Servlet规范中有要求，作为javaweb程序员，编写Servlet类的时候，不建议手动编写构造方法，因为编写构造方法，很容易让无参数构造方法消失，这个操作可能会导致Servlet对象无法实例化。所以init方法是有存在的必要的。</li></ul></li><li><p>init、service、destroy方法中使用最多的是哪个方法？</p><ul><li>使用最多就是service方法，service方法是一定要实现的，因为service方法是处理用户请求的核心方法。</li><li>什么时候使用init方法呢？<ul><li>init方法很少用。</li><li>通常在init方法当中做初始化操作，并且这个初始化操作只需要执行一次。例如：初始化数据库连接池，初始化线程池….</li></ul></li><li>什么时候使用destroy方法呢？<ul><li>destroy方法也很少用。</li><li>通常在destroy方法当中，进行资源的关闭。马上对象要被销毁了，还有什么没有关闭的，抓紧时间关闭资源。还有什么资源没保存的，抓紧时间保存一下。</li></ul></li></ul></li></ul></li></ul><h2 id="GenericServlet"><a href="#GenericServlet" class="headerlink" title="GenericServlet"></a>GenericServlet</h2><ul><li><p>我们编写一个Servlet类直接实现Servlet接口有什么缺点？</p><ul><li>我们只需要service方法，其他方法大部分情况下是不需要使用的。代码很丑陋。</li></ul></li><li><p>适配器设计模式Adapter</p><ul><li>手机直接插到220V的电压上，手机直接就报废了。怎么办？可以找一个充电器。这个充电器就是一个适配器。手机连接适配器。适配器连接220V的电压。这样问题就解决了。</li></ul></li><li><p>编写一个GenericServlet类，这个类是一个抽象类，其中有一个抽象方法service。</p><ul><li>GenericServlet实现Servlet接口。</li><li>GenericServlet是一个适配器。</li><li>以后编写的所有Servlet类继承GenericServlet，重写service方法即可。</li></ul></li><li><p>思考：GenericServlet类是否需要改造一下？怎么改造？更利于子类程序的编写？</p><ul><li><p>思考第一个问题：我提供了一个GenericServlet之后，init方法还会执行吗？</p><ul><li>还会执行。会执行GenericServlet类中的init方法。</li></ul></li><li><p>思考第二个问题：init方法是谁调用的？</p><ul><li>Tomcat服务器调用的。</li></ul></li><li><p>思考第三个问题：init方法中的ServletConfig对象是谁创建的？是谁传过来的？</p><ul><li>都是Tomcat干的。</li><li>Tomcat服务器先创建了ServletConfig对象，然后调用init方法，将ServletConfig对象传给了init方法。</li></ul></li><li><p>思考一下Tomcat服务器伪代码：</p><ul><li><pre><code class="lang-java">public class Tomcat &#123;    public static void main(String[] args)&#123;        // .....        // Tomcat服务器伪代码        // 创建LoginServlet对象（通过反射机制，调用无参数构造方法来实例化LoginServlet对象）        Class clazz = Class.forName(&quot;com.bjpowernode.javaweb.servlet.LoginServlet&quot;);        Object obj = clazz.newInstance();        // 向下转型        Servlet servlet = (Servlet)obj;        // 创建ServletConfig对象        // Tomcat服务器负责将ServletConfig对象实例化出来。        // 多态（Tomcat服务器完全实现了Servlet规范）        ServletConfig servletConfig = new org.apache.catalina.core.StandardWrapperFacade();        // 调用Servlet的init方法        servlet.init(servletConfig);        // 调用Servlet的service方法        // ....    &#125;&#125;</code></pre></li></ul></li></ul></li></ul><h2 id="ServletConfig"><a href="#ServletConfig" class="headerlink" title="ServletConfig"></a>ServletConfig</h2><h2 id="ServletContext"><a href="#ServletContext" class="headerlink" title="ServletContext"></a>ServletContext</h2>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> javaweb </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>算法</title>
      <link href="/2023/01/19/%E7%AE%97%E6%B3%95/"/>
      <url>/2023/01/19/%E7%AE%97%E6%B3%95/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
        <tags>
            
            <tag> 算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>前端框架</title>
      <link href="/2022/07/19/%E5%89%8D%E7%AB%AF%E5%9F%BA%E7%A1%80%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
      <url>/2022/07/19/%E5%89%8D%E7%AB%AF%E5%9F%BA%E7%A1%80%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
        <tags>
            
            <tag> 前端 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>前端基础</title>
      <link href="/2022/04/24/%E5%89%8D%E7%AB%AF%E5%9F%BA%E7%A1%80/"/>
      <url>/2022/04/24/%E5%89%8D%E7%AB%AF%E5%9F%BA%E7%A1%80/</url>
      
        <content type="html"><![CDATA[<h1 id="1-html"><a href="#1-html" class="headerlink" title="1.html"></a>1.html</h1><h1 id="2-css"><a href="#2-css" class="headerlink" title="2.css"></a>2.css</h1><h1 id="4-js"><a href="#4-js" class="headerlink" title="4.js"></a>4.js</h1>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>mysql</title>
      <link href="/2022/03/17/mysql/"/>
      <url>/2022/03/17/mysql/</url>
      
        <content type="html"><![CDATA[<h2 id="1-数据库概述及数据准备"><a href="#1-数据库概述及数据准备" class="headerlink" title="1.数据库概述及数据准备"></a>1.数据库概述及数据准备</h2><h4 id="1-1-sql-概述"><a href="#1-1-sql-概述" class="headerlink" title="1.1 sql 概述"></a>1.1 sql 概述</h4><p>SQL，一般发音为sequel，SQL的全称Structured Query Language)，SQL用来和数据库打交道，完成和数据库的通信，SQL是一套标准。但是每一个数据库都有自己的特性别的数据库没有,当使用这个数据库特性相关的功能,这时SQL语句可能就不是标准了.(90%以上的SQL都是通用的)</p><h4 id="1-2-什么是数据库"><a href="#1-2-什么是数据库" class="headerlink" title="1.2 什么是数据库"></a>1.2 什么是数据库</h4><p>数据库，通常是一个或一组文件，保存了一些符合特定规格的数据,数据库对应的英语单词是DataBase,简称:DB,数据库软件称为数据库管理系统（DBMS），全称为DataBase Management System，如：Oracle、SQL Server、MySql、Sybase、informix、DB2、interbase、PostgreSql 。</p><h4 id="1-3-mysql-概述"><a href="#1-3-mysql-概述" class="headerlink" title="1.3 mysql 概述"></a>1.3 mysql 概述</h4><p>MySQL最初是由“MySQL AB”公司开发的一套关系型数据库管理系统（RDBMS-Relational Database Mangerment System）。</p><p>MySQL不仅是最流行的开源数据库，而且是业界成长最快的数据库，每天有超过7万次的下载量，其应用范围从大型企业到专有的嵌入应用系统。</p><p>MySQL AB是由两个瑞典人和一个芬兰人：David Axmark、Allan Larsson和Michael “Monty” Widenius在瑞典创办的。</p><p>在2008年初，Sun Microsystems收购了MySQL AB公司。在2009年，Oracle收购了Sun公司，使MySQL并入Oracle的数据库产品线</p><h4 id="1-4-mysql-的安装"><a href="#1-4-mysql-的安装" class="headerlink" title="1.4 mysql 的安装"></a>1.4 mysql 的安装</h4><p>打开下载的mysql安装文件mysql-essential-5.0.22-win32.msi，双击运行，出现如下界面</p><p> <img src="https://cdn.staticaly.com/gh/2829590913/cdn@master/img/1.jpg" alt=""></p><p>)</p><h4 id="1-5-表"><a href="#1-5-表" class="headerlink" title="1.5 表"></a>1.5 表</h4><p>表(table)是一种<strong>结构化的文件</strong>，可以用来存储特定类型的数据，如：学生信息，课程信息，都可以放到表中。另外表都有特定的名称，而且不能重复。表中具有几个概念：列、行、主键。 列叫做字段(Column),行叫做表中的记录,每一个字段都有:字段名称/字段数据类型/字段约束/字段长度</p><div class="table-container"><table><thead><tr><th>学号（主键）</th><th>姓名</th><th>性别</th><th>年龄</th></tr></thead><tbody><tr><td>00001</td><td>张三</td><td>男</td><td>20</td></tr><tr><td>00002</td><td>李四</td><td>女</td><td>20</td></tr></tbody></table></div><h4 id="1-6-sql的分类"><a href="#1-6-sql的分类" class="headerlink" title="1.6 sql的分类"></a>1.6 sql的分类</h4><p>数据查询语言(DQL-Data Query Language) </p><p>代表关键字:select </p><p>数据操纵语言(DML-Data Manipulation Language)</p><p>代表关键字:insert,delete,update</p><p>数据定义语言(DDL-Data Definition Language)</p><p>代表关键字:create ,drop,alter,</p><p>事务控制语言(TCL-Transactional Control Language)</p><p>代表关键字:commit ,rollback;</p><p>数据控制语言(DCL-Data Control Language)</p><p>代表关键字:grant,revoke.</p><h4 id="1-7-导入演示数据"><a href="#1-7-导入演示数据" class="headerlink" title="1.7 导入演示数据"></a>1.7 导入演示数据</h4><p>使用MySQL命令行客户端来装载数据库。</p><h5 id="1-连接mysql"><a href="#1-连接mysql" class="headerlink" title="1.连接mysql"></a>1.连接mysql</h5><p>终端输入代码: mysql -u+用户名 -p+密码</p><h5 id="2-创建“js”数据库"><a href="#2-创建“js”数据库" class="headerlink" title="2.创建“js”数据库"></a>2.创建“js”数据库</h5><p>终端输入：create database js;</p><h5 id="3-选择数据库"><a href="#3-选择数据库" class="headerlink" title="3.选择数据库"></a>3.选择数据库</h5><p>use + 数据库名 例如： user js;</p><h5 id="4-导入数据"><a href="#4-导入数据" class="headerlink" title="4.导入数据"></a>4.导入数据</h5><p>source +sql脚本</p><h5 id="5-删除数据库"><a href="#5-删除数据库" class="headerlink" title="5.删除数据库"></a>5.删除数据库</h5><p>drop database js;</p><h4 id="1-8-表结构描述"><a href="#1-8-表结构描述" class="headerlink" title="1.8 表结构描述"></a>1.8 表结构描述</h4><p>表名称：dept</p><p>描述：部门信息表</p><div class="table-container"><table><thead><tr><th>英文字段名称</th><th>中文描述</th><th>类型</th></tr></thead><tbody><tr><td>DEPTNO</td><td>部门编号</td><td>INT(2)</td></tr><tr><td>DNAME</td><td>部门名称</td><td>VARCHAR(14)</td></tr><tr><td>LOC</td><td>位置</td><td>VARCHAR(13)</td></tr></tbody></table></div><p>表名称：emp</p><p>描述：员工信息表</p><div class="table-container"><table><thead><tr><th>英文字段名称</th><th>中文描述</th><th>类型</th></tr></thead><tbody><tr><td>EMPNO</td><td>员工编号</td><td>INT (4)</td></tr><tr><td>ENAME</td><td>员工姓名</td><td>VARCHAR(10)</td></tr><tr><td>JOB</td><td>工作岗位</td><td>VARCHAR(9)</td></tr><tr><td>MGR</td><td>上级领导</td><td>INT (4)</td></tr><tr><td>HIREDATE</td><td>入职日期</td><td>DATE</td></tr><tr><td>SAL</td><td>薪水</td><td>DOUBLE(7,2)</td></tr><tr><td>COMM</td><td>津贴</td><td>DOUBLE (7,2)</td></tr><tr><td>DEPTNO</td><td>部门编号</td><td>INT(2)</td></tr></tbody></table></div><p>注：DEPTNO字段是外键，DEPTNO的值来源于dept表的主键，起到了约束的作用</p><p>表名称：salgrade</p><p>描述：薪水等级信息表</p><div class="table-container"><table><thead><tr><th>英文字段名称</th><th>中文描述</th><th>类型</th></tr></thead><tbody><tr><td>GRADE</td><td>等级</td><td>INT</td></tr><tr><td>LOSAL</td><td>最低薪水</td><td>INT</td></tr><tr><td>HISAL</td><td>最高薪水</td><td>INT</td></tr></tbody></table></div><h3 id="2-常用命令"><a href="#2-常用命令" class="headerlink" title="2.常用命令"></a>2.常用命令</h3><h4 id="2-1-查看mysql版本"><a href="#2-1-查看mysql版本" class="headerlink" title="2.1 查看mysql版本"></a>2.1 查看mysql版本</h4><p>mysql -v</p><h4 id="2-2-创建数据库"><a href="#2-2-创建数据库" class="headerlink" title="2.2 创建数据库"></a>2.2 创建数据库</h4><h5 id="1-create-database-数据库名称；"><a href="#1-create-database-数据库名称；" class="headerlink" title="1 create database 数据库名称；"></a>1 create database 数据库名称；</h5><h4 id="2-3-查询当前使用的数据库"><a href="#2-3-查询当前使用的数据库" class="headerlink" title="2 .3 查询当前使用的数据库"></a>2 .3 查询当前使用的数据库</h4><p>select database();</p><h4 id="2-4-终止一条语句"><a href="#2-4-终止一条语句" class="headerlink" title="2.4 终止一条语句"></a>2.4 终止一条语句</h4><p>\c</p><h4 id="2-5-退出mysql"><a href="#2-5-退出mysql" class="headerlink" title="2.5 退出mysql"></a>2.5 退出mysql</h4><p>可使用quit exit</p><h3 id="3-查看演示数据的表结构"><a href="#3-查看演示数据的表结构" class="headerlink" title="3. 查看演示数据的表结构"></a>3. 查看演示数据的表结构</h3><h5 id="3-1-查看和指定现有的数据库"><a href="#3-1-查看和指定现有的数据库" class="headerlink" title="3.1 查看和指定现有的数据库"></a>3.1 查看和指定现有的数据库</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">show databases;</span><br></pre></td></tr></table></figure><h5 id="3-2-指定数据库"><a href="#3-2-指定数据库" class="headerlink" title="3.2 指定数据库"></a>3.2 指定数据库</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">use js;</span><br></pre></td></tr></table></figure><h5 id="3-3-查看当前使用的库"><a href="#3-3-查看当前使用的库" class="headerlink" title="3.3 查看当前使用的库"></a>3.3 查看当前使用的库</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select database();</span><br></pre></td></tr></table></figure><h5 id="3-4-查看当前库中的表"><a href="#3-4-查看当前库中的表" class="headerlink" title="3.4 查看当前库中的表"></a>3.4 查看当前库中的表</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">show tables;</span><br></pre></td></tr></table></figure><h5 id="3-5-查看表结构"><a href="#3-5-查看表结构" class="headerlink" title="3.5 查看表结构"></a>3.5 查看表结构</h5><p>desc 表名称；</p><h5 id="3-6-查看表的创建语句"><a href="#3-6-查看表的创建语句" class="headerlink" title="3.6 查看表的创建语句"></a>3.6 查看表的创建语句</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">show create table emp;</span><br></pre></td></tr></table></figure><h3 id="4-简单的查询"><a href="#4-简单的查询" class="headerlink" title="4.简单的查询"></a>4.简单的查询</h3><h5 id="4-1查询员工姓名："><a href="#4-1查询员工姓名：" class="headerlink" title="4.1查询员工姓名："></a>4.1查询员工姓名：</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select ename from emp;</span><br></pre></td></tr></table></figure><h5 id="4-2查询员工的编号和姓名"><a href="#4-2查询员工的编号和姓名" class="headerlink" title="4.2查询员工的编号和姓名"></a>4.2查询员工的编号和姓名</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select empno, ename from emp;</span><br></pre></td></tr></table></figure><h5 id="4-3查询全部字段"><a href="#4-3查询全部字段" class="headerlink" title="4.3查询全部字段"></a>4.3查询全部字段</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select * from emp;</span><br></pre></td></tr></table></figure><h5 id="4-4计算员工的年薪："><a href="#4-4计算员工的年薪：" class="headerlink" title="4.4计算员工的年薪："></a>4.4计算员工的年薪：</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select empno,ename,sal*12 from emp;</span><br></pre></td></tr></table></figure><h5 id="4-5将查询出来的字段显示为中文"><a href="#4-5将查询出来的字段显示为中文" class="headerlink" title="4.5将查询出来的字段显示为中文"></a>4.5将查询出来的字段显示为中文</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select  empno as &#x27;员工编号&#x27;，ename as &#x27;员工姓名&#x27;,sal*12 as &#x27;年薪&#x27; from emp;</span><br></pre></td></tr></table></figure><h3 id="5-条件查询"><a href="#5-条件查询" class="headerlink" title="5.条件查询"></a>5.条件查询</h3><p>条件查询需要用到where语句，where必须放到from语句表的后面</p><p>支持如下运算符</p><div class="table-container"><table><thead><tr><th>运算符</th><th>说明</th></tr></thead><tbody><tr><td>=</td><td>等于</td></tr><tr><td>&lt;&gt;或!=</td><td>不等于</td></tr><tr><td>&lt;</td><td>小于</td></tr><tr><td>&lt;=</td><td>小于等于</td></tr><tr><td>&gt;</td><td>大于</td></tr><tr><td>&gt;=</td><td>大于等于</td></tr><tr><td>between … and ….</td><td>两个值之间,<strong>等同于 &gt;= and &lt;=</strong></td></tr><tr><td>is null</td><td>为null（is not null 不为空）</td></tr><tr><td><strong>and</strong></td><td>并且</td></tr><tr><td><strong>or</strong></td><td>或者</td></tr><tr><td>in</td><td>包含，相当于多个or（not in不在这个范围中）</td></tr><tr><td>not</td><td>not可以取非，主要用在is 或in中</td></tr><tr><td>like</td><td>like称为模糊查询，支持%或下划线匹配  %匹配任意个字符  下划线，一个下划线只匹配一个字符</td></tr></tbody></table></div><h5 id="5-1-等号操作符"><a href="#5-1-等号操作符" class="headerlink" title="5.1 等号操作符"></a>5.1 等号操作符</h5><p>查询薪水为5000的员工</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select empno,ename,sal from emp where sal =5000;</span><br></pre></td></tr></table></figure><p>查询job为MANAGER的员工</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select empno,ename from emp  where job=&#x27;manager&#x27;;</span><br></pre></td></tr></table></figure><p>因为job为字符串所以要单引号</p><p>注意：</p><p>MySQL在windows下是不区分大小写的，将script文件导入MySQL后表名也会自动转化为小写，结果再 想要将数据库导出放到linux服务器中使用时就出错了。因为在linux下表名区分大小写而找不到表，查了很多都是说在linux下更改MySQL的设置使其也不区分大小写，但是有没有办法反过来让windows 下大小写敏感呢。其实方法是一样的，相应的更改windows中MySQL的设置就行了。</p><p>​    具体操作：</p><p>​    在MySQL的配置文件my.ini中增加一行：</p><p>​    lower_case_table_names = 0</p><p>​    其中 0：区分大小写，1：不区分大小写</p><p>​    MySQL在Linux下数据库名、表名、列名、别名大小写规则是这样的：</p><p>　　  1、数据库名与表名是严格区分大小写的；</p><p>　　  2、表的别名是严格区分大小写的；</p><p>　　  3、列名与列的别名在所有的情况下均是忽略大小写的；</p><p>　　  4、变量名也是严格区分大小写的；  MySQL在Windows下都不区分大小写</p><h5 id="5-2-lt-gt-操作符"><a href="#5-2-lt-gt-操作符" class="headerlink" title="5.2 &lt;&gt; 操作符"></a>5.2 &lt;&gt; 操作符</h5><p>查询薪水不等于5000的员工</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select empno,ename,sal from emp where sal &lt;&gt;5000;</span><br></pre></td></tr></table></figure><p>也可以写为：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select empno, ename,sal from emp where sal !=5000;</span><br></pre></td></tr></table></figure><p>查询工作岗位不等于MANAGER的员工</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select empno,ename from emp where job &lt;&gt; &#x27;MANAGER&#x27;;</span><br></pre></td></tr></table></figure><h5 id="5-3-between…and…操作符"><a href="#5-3-between…and…操作符" class="headerlink" title="5.3 between…and…操作符"></a>5.3 between…and…操作符</h5><p>查询薪水为1600到3000的员工</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select empno, ename,sal from emp where sal &gt;=1600 and sal&lt;= 3000;</span><br></pre></td></tr></table></figure><p>也可以写为</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select empno,ename,sal from emp where sal between 1600 and 3000;</span><br></pre></td></tr></table></figure><h5 id="5-4-is-null"><a href="#5-4-is-null" class="headerlink" title="5.4 is null"></a>5.4 is null</h5><p>l Null为空，但不是空串，为null可以设置这个字段不填值，如果查询为null的字段，采用is null</p><p>l 查询津贴为空的员工</p><p>select * from emp where comm=null;这是错误的因为null比较特殊需要is比较</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select * from emp where comm is null;</span><br></pre></td></tr></table></figure><h5 id="5-5-and"><a href="#5-5-and" class="headerlink" title="5.5 and"></a>5.5 and</h5><p>and表示并且的含义，表示所有的条件必须满足</p><p>工作岗位为MANAGER,薪水大于2500的员工</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select * from emp where job =&#x27;MANAGER&#x27; and sal &gt; 2500;</span><br></pre></td></tr></table></figure><h5 id="5-6-or"><a href="#5-6-or" class="headerlink" title="5.6 or"></a>5.6 or</h5><p>or，只要满足条件即可,相当于包含</p><p>l 查询出job为manager或者job为salesman的员工</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select * from emp where job=&#x27;MANAGER&#x27; or job=&#x27;SALESMAN&#x27;;</span><br></pre></td></tr></table></figure><h5 id="5-7-表达式的优先级"><a href="#5-7-表达式的优先级" class="headerlink" title="5.7 表达式的优先级"></a>5.7 表达式的优先级</h5><p>l 查询薪水大于1800，并且部门代码为20或30的员工（错误的写法）</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select * from emp where sal &gt; 1800 and deptno = 20 or deptno = 30;</span><br></pre></td></tr></table></figure><p>以上输出不是预期结果，薪水小于1800的数据也被查询上来了，原因是表达式的优先级导致的，首先过滤sal &gt; 1800 and deptno = 20，然后再将deptno = 30员工合并过来，所以是不对的</p><p>l 查询薪水大于1800，并且部门代码为20或30的（正确的写法）</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select * from emp where sal &gt; 1800 and (deptno = 20 or deptno = 30);</span><br></pre></td></tr></table></figure><h5 id="5-8-in"><a href="#5-8-in" class="headerlink" title="5.8 in"></a>5.8 in</h5><p>in表示包含的意思，完全可以采用or来表示，采用in会更简洁一些</p><p>l 查询出job为manager或者job为salesman的员工</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select * from emp where job in (&#x27;manager&#x27;,&#x27;salesman&#x27;);</span><br></pre></td></tr></table></figure><p>l 查询出薪水包含1600和薪水包含3000的员工</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select * from emp where sal in(1600, 3000);</span><br></pre></td></tr></table></figure><h5 id="5-9-not"><a href="#5-9-not" class="headerlink" title="5.9 not"></a>5.9 not</h5><p>l 查询出薪水不包含1600和薪水不包含3000的员工（第一种写法）</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select * from emp where sal &lt;&gt; 1600 and sal &lt;&gt; 3000;</span><br></pre></td></tr></table></figure><p>查询出薪水不包含1600和薪水不包含3000的员工（第二种写法</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select * from emp where not (sal = 1600 or sal = 3000);</span><br></pre></td></tr></table></figure><p>l 查询出薪水不包含1600和薪水不包含3000的员工（第三种写法）</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select * from emp where sal not in (1600, 3000);</span><br></pre></td></tr></table></figure><p>l 查询出津贴不为null的所有员工</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select * from emp where comm is not  null;</span><br></pre></td></tr></table></figure><h5 id="5-10-like"><a href="#5-10-like" class="headerlink" title="5.10 like"></a>5.10 like</h5><p>l Like可以实现模糊查询，like支持%和下划线匹配</p><p>l 查询姓名以M开头所有的员工</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select * from emp where ename like &#x27;M%&#x27;;</span><br></pre></td></tr></table></figure><p>l 查询姓名以N结尾的所有的员工</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select * from emp where ename like &#x27;%N&#x27;;</span><br></pre></td></tr></table></figure><p>l 查询姓名中包含O的所有的员工</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select * from emp where ename like &#x27;%O%&#x27;;</span><br></pre></td></tr></table></figure><p>l 查询姓名中第二个字符为A的所有员工</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select * from emp where ename like &#x27;_A%&#x27;;</span><br></pre></td></tr></table></figure><p>Like中%和下划线的差别？</p><p>%匹配任意字符出现的个数</p><p>下划线只匹配一个字符</p><p>Like 中的表达式必须放到单引号中|双引号中，以下写法是错误的：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select * from emp where ename like _A%</span><br></pre></td></tr></table></figure><h3 id="6-排序数据"><a href="#6-排序数据" class="headerlink" title="6.排序数据"></a>6.排序数据</h3><h5 id="6-1-单一字段排序"><a href="#6-1-单一字段排序" class="headerlink" title="6.1 单一字段排序"></a>6.1 单一字段排序</h5><p>排序采用order by子句，order by后面跟上排序字段，排序字段可以放多个，多个采用逗号间隔，order by默认采用升序，如果存在where子句那么order by必须放到where语句的后面</p><p>按照薪水从小到大排序</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select * from emp order by sal;</span><br></pre></td></tr></table></figure><p>取得job为MANAGER的员工、按照薪水由大到小排序</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select * from emp where job =&#x27;MANAGER&#x27; order by sal;</span><br></pre></td></tr></table></figure><p>如果包含where语句order by必须放到where后面，如果没有where语句order by放到表的后面</p><p>以下写法是错误的</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select * from emp order by sal where job = &#x27;MANAGER&#x27;;</span><br></pre></td></tr></table></figure><p>按照多个字段排序，如：首先按照job排序，在按照sal排序</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select *from emp order by job,sal;</span><br></pre></td></tr></table></figure><h5 id="6-2-手动指定按照薪水由小到大排序"><a href="#6-2-手动指定按照薪水由小到大排序" class="headerlink" title="6.2 手动指定按照薪水由小到大排序"></a>6.2 手动指定按照薪水由小到大排序</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select *from emp order by sal asc;</span><br></pre></td></tr></table></figure><h5 id="6-3-多个字段排序"><a href="#6-3-多个字段排序" class="headerlink" title="6.3 多个字段排序"></a>6.3 多个字段排序</h5><p>按照job和薪水倒序”</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select * from emp order by job desc ,sal desc;</span><br></pre></td></tr></table></figure><h5 id="6-4-使用字段的位置来排序"><a href="#6-4-使用字段的位置来排序" class="headerlink" title="6.4 使用字段的位置来排序"></a>6.4 使用字段的位置来排序</h5><p>按照薪水升序</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select * from emp order by 6;</span><br></pre></td></tr></table></figure><h3 id="7-分组函数-聚合函数-多汗处理函数"><a href="#7-分组函数-聚合函数-多汗处理函数" class="headerlink" title="7. 分组函数/聚合函数/多汗处理函数"></a>7. 分组函数/聚合函数/多汗处理函数</h3><p>count       取得记录数</p><p>sum         求和</p><p>avg          取平均</p><p>max        取最大的数</p><p>min        取最小的数</p><p>注意：分组函数自动忽略空值，不需要手动的加where条件排除空值</p><p>select count(*) from emp where xxx;          <strong>符合条件的所有记录总数。</strong></p><p>select count(comm) from emp;     comm     这个字段中不为空的元素总数</p><p>且分组函数不能直接使用在where关键字后面</p><p>mysql&gt; select ename,sal from emp where sal &gt; avg(sal);</p><p>ERROR 1111 (HY000): Invalid use of group function</p><h5 id="7-1-count"><a href="#7-1-count" class="headerlink" title="7.1 count"></a>7.1 count</h5><p>取得所有的员工数</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select count(*) from emp;</span><br></pre></td></tr></table></figure><p>取得津贴不为null员工数</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select count(comm) from emp;</span><br></pre></td></tr></table></figure><p>采用count(字段名称)，不会取得为null的记录数</p><p>取得工作岗位的个数</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select count(distinct job)from emp;</span><br></pre></td></tr></table></figure><h5 id="7-2-sun"><a href="#7-2-sun" class="headerlink" title="7.2 sun"></a>7.2 sun</h5><p>sum可以取得某一个列的和，null会被忽略</p><p>取得薪水的合计</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select sum(sal)from emp;</span><br></pre></td></tr></table></figure><p>取得津贴的合计</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select sum(comm)from emp;</span><br></pre></td></tr></table></figure><p>取得薪水的合计</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select sum(sal+comm)from emp;</span><br></pre></td></tr></table></figure><p>从以上结果来看，不正确，原因在于comm字段有null值，所以无法计算，sum会忽略掉，正确的做法是将comm字段转换成0</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select sum(sal+IFNULL(comm, 0)) from emp;</span><br></pre></td></tr></table></figure><h5 id="7-3-avg"><a href="#7-3-avg" class="headerlink" title="7.3 avg"></a>7.3 avg</h5><p>取得某一列的平均值</p><p>取得的平均薪水</p><p>select avg(sal) from emp;</p><h5 id="7-4-max"><a href="#7-4-max" class="headerlink" title="7.4 max"></a>7.4 max</h5><p>取得某一列的最大值</p><p>取得最高薪水</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select max(sal)from emp;</span><br></pre></td></tr></table></figure><p>取得最晚入职的员工</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select max (str_to_date(hiredate,&#x27;%y-%m-%d&#x27;))from emp;</span><br></pre></td></tr></table></figure><h5 id="7-5-min"><a href="#7-5-min" class="headerlink" title="7.5 min"></a>7.5 min</h5><p>取得某一列的最小值</p><p>取得最低薪水</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select min(sal)from emp;</span><br></pre></td></tr></table></figure><p>取得最早入职的员工</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select min(str_to_date(hiredate,&#x27;%y-%m-%d&#x27;))from emp;</span><br></pre></td></tr></table></figure><h5 id="7-6-组合聚合函数"><a href="#7-6-组合聚合函数" class="headerlink" title="7.6 组合聚合函数"></a>7.6 组合聚合函数</h5><p>可以将这些聚合函数都放到select中一起使用</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select count(*),sum(sal),avg(sal),max(sal),min(sal)from emp;</span><br></pre></td></tr></table></figure><h3 id="8-分组查询"><a href="#8-分组查询" class="headerlink" title="8.  分组查询"></a>8.  分组查询</h3><h5 id="8-1-group-by"><a href="#8-1-group-by" class="headerlink" title="8.1 group by"></a>8.1 group by</h5><p>取得每个工作岗位的工资合计。要求显示岗位名称和工工资合计</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select job, sun(sal) from emp group by job;</span><br></pre></td></tr></table></figure><p>如果使用了 order by ,order by 必须放在groupby后面</p><p>按照工作岗位和部门编码分组，取得的工资合计</p><p>分组语句</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select job,deptno,sum(sal) from emp group by job,deptno;</span><br></pre></td></tr></table></figure><p>mysql&gt; select empno,deptno,avg(sal) from emp group by deptno;</p><p>+———-+————+——————-+</p><p>| empno | deptno | avg(sal)  |</p><p>+———-+————+——————-+</p><p>| 7782 |   10 | 2916.666667 |</p><p>| 7369 |   20 | 2175.000000 |</p><p>| 7499 |   30 | 1566.666667 |</p><p>+———-+————+——————-+</p><p>以上SQL语句在Oracle数据库中无法执行，执行报错。</p><p>以上SQL语句在Mysql数据库中可以执行，但是执行结果矛盾。</p><p>在SQL语句中若有group by 语句，那么在select语句后面只能跟<strong>分组函数**</strong>+<strong>**参与分组的字段</strong>。</p><h5 id="8-2-having"><a href="#8-2-having" class="headerlink" title="8.2 having"></a>8.2 having</h5><p>如果想对分组数据再进行过滤需要使用having子句</p><p>取得每个岗位的平均工资大于2000</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select job,avg(sal)from emp group by job having avg(sal)&gt;2000;</span><br></pre></td></tr></table></figure><p>分组函数执行顺序：</p><p>根据条件查询数据</p><p>分组</p><p>采用having过滤，取得正确的数据</p><h5 id="8-3-select-语句总结"><a href="#8-3-select-语句总结" class="headerlink" title="8.3 select 语句总结"></a>8.3 select 语句总结</h5><p>一个完整的select语句格式如下</p><p>select字段名</p><p>from表名</p><p>where…..</p><p>group by…</p><p>having…..</p><p>order by….</p><p>以上语句的执行顺序</p><p>1.首先执行where语句过滤原始数据</p><p>2.执行group by 进行分组</p><p>3.执行having 对分组数据进行操作</p><p>4.执行select选出数据</p><p>5.执行orderby排序</p><p>原则：能在where中过滤的数据，尽量在where中过滤，效率较高。having的过滤是专门对分组之后的数据进行过滤的。</p><h3 id="9-连接查询"><a href="#9-连接查询" class="headerlink" title="9. 连接查询"></a>9. 连接查询</h3>]]></content>
      
      
      <categories>
          
          <category> 数据库 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据库 </tag>
            
            <tag> mysql </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>使用Hexo和Github搭建个人博客</title>
      <link href="/2022/02/14/%E4%BD%BF%E7%94%A8Hexo%E5%92%8CGithub%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/"/>
      <url>/2022/02/14/%E4%BD%BF%E7%94%A8Hexo%E5%92%8CGithub%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/</url>
      
        <content type="html"><![CDATA[<p>仅为个人经验总结，应该有更好的搭建方式。建议：最好至少要具备一定的前端知识。</p><h4 id="准备工具"><a href="#准备工具" class="headerlink" title="准备工具"></a>准备工具</h4><p>在开始配置之前。需要下载一下几个程序：</p><p>1、Git</p><p>2、node</p><p>3、Typora （推荐，用来编辑博客，可用其他编辑器，也可搭建完成后再安装）建议直接到官网下载。</p><p>4、一个代码编辑器，推荐VScode，用于修改配置文件时使用。</p><h4 id="开始配置"><a href="#开始配置" class="headerlink" title="开始配置"></a>开始配置</h4><p>windows10使用控制终端操作，快捷键：win+R，搜索cmd打开</p><p>1、安装node后可以通过如下命令检查是否安装成功：</p><p>node -v #查看node版本<br>npm -v #查看npm版本</p><p>2、安装淘宝的cnpm</p><p>npm install -g cnpm –registry=<a href="http://registry.npm.taobao.org">http://registry.npm.taobao.org</a></p><p>检查版本：</p><p>cnpm -v</p><p>3、安装hexo框架</p><p>cnpm install -g hexo-cli</p><p>检查版本：</p><p>hexo -v</p><p>4、在任意位置创建blog文件夹（名字也随意，不一定是blog），用来放本地博客的数据和文件。如我在H盘创建了blog，地址如：H:\blog。</p><p>创建完成后，打开Git CMD（Git正确安装的话，应该在开始菜单内）</p><p>使用命令进入创建的这个blog文件夹，例如：</p><p>C:\Users\cai’cheng&gt;H:</p><p>H:>cd blog\</p><p>无误后输入如下代码，进行配置（此步可能花费很长时间，如失败或退出，删除该这个blog文件夹，重来）：</p><p>hexo init</p><p>待出现 “Start blogging with Hexo！”后，即代表成功。此时blog下会出现很多文件（大概八个），这就是以后操作博客的地方。</p><p>5、验证是否成功：</p><p>hexo s #启动服务</p><p>（1）待出现提示”Hexo is running at <a href="http://localhost:4000">http://localhost:4000</a>. Press Ctrl+C to stop”后即代表成功，其他提示则错。</p><p>（2）打开浏览器地址栏输入localhost:4000，出现hexo的页面则代表你的blog创建成功，但这一步是本地预览，还未托管成功，别人在网上看不到。如下：</p><p><img src="https://cdn.jsdelivr.net/gh/caicheng918/CDN@4.0/102/20200313180932972.png" alt=""></p><p>注：如第（1）步成功，第（2）步失败，代表4000端口被占用，返回Git CMD先按Ctrl+C退出服务，输入：</p><p>hexo s -p 5000 #以5000端口启动服务</p><p>再在浏览器输入localhost:5000，就能进入页面。</p><h4 id="上传到Github-Pages"><a href="#上传到Github-Pages" class="headerlink" title="上传到Github Pages"></a>上传到Github Pages</h4><p>1、首先安装插件：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-deployer-git –save</span><br></pre></td></tr></table></figure><p>2、、在自己的<a href="https://github.com">Github</a>主页创建一个新的repository。创建的repository的名字必须为 yourname.github.io。注意替换yourname。</p><p>3、设置Git的SSH。</p><p>回到博客根目录的git bash中，输入</p><p>git config —global user.name “yourname”<br>git config —global user.email “youremail”</p><p>然后创建SSH,一路回车</p><p>ssh-keygen -t rsa -C “youremail”</p><p>成功生成后一般会在C盘user文件夹里找到.ssh这个文件夹，里面的id_rsa.pub文件就是SSH密钥。</p><p>将这个密钥复制下来，在Github的SSH设置里面填入这个密钥，保存后才能部署成功</p><p>4、在本地hexo目录下的config_yml里定位到deploy编辑成如下格式，注意冒号有一个空格，必须严格按照格式填写。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Ydeploy:</span><br><span class="line">   type:  git </span><br><span class="line">   repository:  http://github.com/yourname/yourname.github.io.git</span><br><span class="line">   branch:  master</span><br></pre></td></tr></table></figure><p>5、需要部署时在博客根目录Git bush使用以下三件套命令：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">hexo clean #清除缓存</span><br><span class="line">hexo g #生成静态文件</span><br><span class="line">hexo d #推送到远端仓库</span><br></pre></td></tr></table></figure><p>6、本地测试时在博客根目录Git bush使用命令：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo s</span><br></pre></td></tr></table></figure><p>出现Hexo is running at <a href="http://localhost:4000">http://localhost:4000</a> . Press Ctrl+C to stop.时则可以在浏览器打开<a href="http://localhost:4000进行测试。">http://localhost:4000进行测试。</a></p><p>如果在浏览器不能打开<a href="http://localhost:4000，则代表4000端口被占用，需要使用其他端口，以5000为例：">http://localhost:4000，则代表4000端口被占用，需要使用其他端口，以5000为例：</a></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo s -p 5000 #以端口5000进行本地测试。</span><br></pre></td></tr></table></figure><p>本地测试时可以改动博客的代码或文件，仅需在浏览器刷新就能看到改动，因此更新博客时最好在本地测试无误后再上传。</p><h4 id="编写博客并上传"><a href="#编写博客并上传" class="headerlink" title="编写博客并上传"></a>编写博客并上传</h4><p>1、如果没安装，可以安装Typora了，这是一个常用的编辑器，具体功能自行探索。</p><p>2、安装好后，在blog根目录下打开Git Bush Here，（下文均默认此操作），输入新建文章命令：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo n &quot;文章名&quot; #生成一篇文章</span><br></pre></td></tr></table></figure><p>此时，会在source文件夹里的_posts文件夹里生成 “第一篇文章.md”的文件，双击它可调用Typora进行编写。</p><p>其中，title是文章标题，time是生成时间，tags是标签（没有tags暂时不管），然后是正文。编写完后即保存。</p><p>注：当你编辑一个新文件完成后，必须将此文件保存到/blog/source/_posts/路径下，不然不能上传博客。</p><p>在Git Bush Here里面输入：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo d</span><br></pre></td></tr></table></figure><p>即可更新到github。</p><h4 id="使用Vercel部署并绑定域名"><a href="#使用Vercel部署并绑定域名" class="headerlink" title="使用Vercel部署并绑定域名"></a>使用Vercel部署并绑定域名</h4><p>使用Vercel部署的好处一是快，二是每当push到github时，Vercel会自动同步，省去了手动部署的麻烦，部署完成还会发送邮件通知。</p><p>1、前往<a href="https://vercel.com/注册，注册时选择绑定github。">https://vercel.com/注册，注册时选择绑定github。</a></p><p>2、创建新项目，选择导入github的博客仓库。</p><p>3、在域名提供商处将域名解析到Vercel的DNS地址。</p><p>4、在setting里选择domain，填入自己的域名，确定。</p><p>5、过一会便能通过此域名访问博客。更新时只需要照常hexo d到github即可，Vercel会自动同步部署。</p><h4 id="更改主题"><a href="#更改主题" class="headerlink" title="更改主题"></a>更改主题</h4><p>由于建立博客后的初始主题很难看，所以应当换个主题。不同的主题配置方式都不太相同，需要自己修改主题配置文件，所以需要自己去动手了解。官方主题网站：<a href="https://hexo.io/themes/">https://hexo.io/themes/</a> ， 选择好后跳转到github下载。好看的有butterfly，next等。以Jerry开发的主题butterfly为例：</p><p>在GitHub下载ZIP文件后（或者本地clone仓库），解压。</p><p>将文件夹复制到/blog/themes下，然后回到blog\根目录下，用记事本打开_config.yml文件，在最后找到这三行代码：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Extensions</span><br><span class="line">Plugins: https://hexo.io/plugins/</span><br><span class="line">Themes: https://hexo.io/themes/</span><br><span class="line">theme: butterfly</span><br></pre></td></tr></table></figure><p>将上方theme后的代码改为下载主题的 文件夹的文件名，其他不改，注意空格，如改为Next主题：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">CODE</span><br><span class="line">Extensions</span><br><span class="line">Plugins: https://hexo.io/plugins/</span><br><span class="line">Themes: https://hexo.io/themes/</span><br><span class="line">theme: Next</span><br></pre></td></tr></table></figure><p>Extensions</p><p>Plugins: <a href="https://hexo.io/plugins/">https://hexo.io/plugins/</a></p><p>Themes: <a href="https://hexo.io/themes/">https://hexo.io/themes/</a></p><p>theme: Next<br>完成后点击保存。回到Git Bush Here输入：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">CODE</span><br><span class="line">hexo g#生成</span><br><span class="line">hexo d</span><br><span class="line">hexo clean#清理hexo缓存</span><br><span class="line">hexo g --d  #一键部署</span><br><span class="line">hexo g#生成</span><br><span class="line">hexo d</span><br><span class="line">hexo clean#清理hexo缓存</span><br><span class="line">hexo g --d  #一键部署。</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 博客教程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexo </tag>
            
            <tag> vercel </tag>
            
            <tag> 教程 </tag>
            
            <tag> github </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数据库连接jdbc笔记</title>
      <link href="/2022/01/27/jdb%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
      <url>/2022/01/27/jdb%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> 数据库 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> jdbc </tag>
            
            <tag> 数据库 </tag>
            
            <tag> mysql </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2022/01/24/hello-world/"/>
      <url>/2022/01/24/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> hexo </tag>
            
            <tag> 主题 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>java基础</title>
      <link href="/2022/01/24/java%E5%9F%BA%E7%A1%80/"/>
      <url>/2022/01/24/java%E5%9F%BA%E7%A1%80/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>部署博客</title>
      <link href="/2022/01/14/%E9%83%A8%E7%BD%B2%E5%8D%9A%E5%AE%A2/"/>
      <url>/2022/01/14/%E9%83%A8%E7%BD%B2%E5%8D%9A%E5%AE%A2/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> 博客教程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexo </tag>
            
            <tag> 博客教程 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
    
    
    <entry>
      <title>关于</title>
      <link href="/about/index.html"/>
      <url>/about/index.html</url>
      
        <content type="html"><![CDATA[<link href="https://cdn.staticaly.com/gh/2829590913/cdn@master/css/botui-theme-default.css" rel="stylesheet"><link href="https://cdn.staticaly.com/gh/2829590913/cdn@master/css/botui.min.css" rel="stylesheet"><div class="entry-content">  <div class="moe-mashiro" style="text-align:center; font-size: 50px; margin-bottom: 20px;">jsonの小破站</div>  <div id="hello-mashiro" class="popcontainer" style="min-height: 300px; padding: 2px 6px 4px; background-color: rgb(36, 200, 255); border-radius: 10px;">    <center>    <p>    </p>    <h4>    与&nbsp;<ruby>    json&nbsp;<rp>    （</rp>    <rt>    真（ま）实（しろ）</rt>    <rp>    ）</rp>    </ruby>    对话中...</h4>    <p>    </p>    </center>    <bot-ui></botui>  </div></div><script src="https://cdn.staticaly.com/gh/2829590913/cdn@master/js/botui.js"></script><script>bot_ui_ini()</script>]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>分类</title>
      <link href="/categories/index.html"/>
      <url>/categories/index.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/css/botui-theme-default.css"/>
      <url>/css/botui-theme-default.css</url>
      
        <content type="html"><![CDATA[@import "https://fonts.googleapis.com/css?family=Open+Sans";.botui-container{font-size:14px;background-color:#fff;font-family:open sans,sans-serif}.botui-messages-container{padding:10px 20px}.botui-actions-container{padding:10px 20px}.botui-message{min-height:30px}.botui-message-content{padding:7px 13px;border-radius:15px;color:#595a5a;background-color:#ebebeb}.botui-message-content.human{color:#f7f8f8;background-color:#919292}.botui-message-content.text{line-height:1.3}.botui-message-content.loading{background-color:rgba(206,206,206,.5);line-height:1.3;text-align:center}.botui-message-content.embed{padding:5px;border-radius:5px}.botui-message-content-link{color:#919292}.botui-actions-text-input{border:0;outline:0;border-radius:0;padding:5px 7px;font-family:open sans,sans-serif;background-color:transparent;color:#595a5a;border-bottom:1px solid #919292}.botui-actions-text-submit{color:#fff;width:30px;padding:5px;height:30px;line-height:1;border-radius:50%;border:1px solid #919292;background:#777979}.botui-actions-buttons-button{border:0;color:#fff;line-height:1;cursor:pointer;font-size:14px;font-weight:500;padding:7px 15px;border-radius:4px;font-family:open sans,sans-serif;background:#777979;box-shadow:2px 3px 4px 0 rgba(0,0,0,.25)}.botui-actions-text-select{border:0;outline:0;border-radius:0;padding:5px 7px;font-family:open sans,sans-serif;background-color:transparent;color:#595a5a;border-bottom:1px solid #919292}.botui-actions-text-searchselect{border:0;outline:0;border-radius:0;padding:5px 7px;font-family:open sans,sans-serif;background-color:transparent;color:#595a5a;border-bottom:1px solid #919292}.botui-actions-text-searchselect .dropdown-toggle{border:none!important}.botui-actions-text-searchselect .selected-tag{background-color:transparent!important;border:0!important}.slide-fade-enter-active{transition:all .3s ease}.slide-fade-enter,.slide-fade-leave-to{opacity:0;transform:translateX(-10px)}.dot{width:.5rem;height:.5rem;border-radius:.5rem;display:inline-block;background-color:#919292}.dot:nth-last-child(1){margin-left:.3rem;animation:loading .6s .3s linear infinite}.dot:nth-last-child(2){margin-left:.3rem;animation:loading .6s .2s linear infinite}.dot:nth-last-child(3){animation:loading .6s .1s linear infinite}@keyframes loading{0%{transform:translate(0,0);background-color:#ababab}25%{transform:translate(0,-3px)}50%{transform:translate(0,0);background-color:#ababab}75%{transform:translate(0,3px)}100%{transform:translate(0,0)}}]]></content>
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/css/botui.min.css"/>
      <url>/css/botui.min.css</url>
      
        <content type="html"><![CDATA[/* * botui 0.3.9 * A JS library to build the UI for your bot * https://botui.org * * Copyright 2019, Moin Uddin * Released under the MIT license.*/a.botui-message-content-link:focus{outline:thin dotted}a.botui-message-content-link:focus:active,a.botui-message-content-link:focus:hover{outline:0}form.botui-actions-text{margin:0}button.botui-actions-buttons-button,input.botui-actions-text-input{margin:0;font-size:100%;line-height:normal;vertical-align:baseline}button.botui-actions-buttons-button::-moz-focus-inner,input.botui-actions-text-input::-moz-focus-inner{border:0;padding:0}button.botui-actions-buttons-button{cursor:pointer;-webkit-appearance:button}.botui-app-container{width:100%;height:100%;line-height:1}@media (min-width:400px){.botui-app-container{width:400px;height:500px;margin:0 auto}}.botui-container{width:100%;height:100%;overflow-y:auto;overflow-x:hidden}.botui-message{margin:10px 0;min-height:20px}.botui-message:after{display:block;content:"";clear:both}.botui-message-content{width:auto;max-width:75%;display:inline-block}.botui-message-content.human{float:right}.botui-message-content iframe{width:100%}.botui-message-content-image{margin:5px 0;display:block;max-width:200px;max-height:200px}.botui-message-content-link{text-decoration:underline}.profil{position:relative;border-radius:50%}.profil.human{float:right;margin-left:5px}.profil.agent{float:left;margin-right:5px}.profil>img{width:26px;height:26px;border:2px solid #e8e8e8}.profil>img.agent{content:url(http://decodemoji.com/img/logos/blue_moji_hat.svg);border-radius:50%}button.botui-actions-buttons-button{margin-top:10px;margin-bottom:10px}button.botui-actions-buttons-button:not(:last-child){margin-right:10px}@media (min-width:400px){.botui-actions-text-submit{display:none}}]]></content>
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/css/footer.css"/>
      <url>/css/footer.css</url>
      
        <content type="html"><![CDATA[@import "//at.alicdn.com/t/c/font_3865771_x5i9gfez3f.css";svg.icon {  width: 2em;  height: 2em;  vertical-align: -0.15em;  fill: currentColor;  overflow: hidden;}/*侧边栏页面*//*#aside-content>.card-widget card-announcement {    background: rgba(255,255,255,.6);}#aside-content>.card-widget card-info {    background: rgba(255,255,255,.6);}#aside-content>.card-widget {    background: rgba(255,255,255,.6);}#aside-content>.sticky_layout>.card-widget {    background: rgba(255,255,255,.6);}*//* @font-face {  font-family: Candyhome;  src: url(https://npm.elemecdn.com/anzhiyu-blog@1.1.6/fonts/Candyhome.ttf);  font-display: swap;  font-weight: lighter;} */@font-face {  font-family: ZhuZiAYuanJWD;  src: url(https://npm.elemecdn.com/anzhiyu-blog@1.1.6/fonts/ZhuZiAWan.woff2);  font-display: swap;  font-weight: lighter;}div#menus {  font-family: "ZhuZiAYuanJWD";}h1#site-title {  font-family: ZhuZiAYuanJWD;  font-size: 3em !important;}a.article-title,a.blog-slider__title,a.categoryBar-list-link,h1.post-title {  font-family: ZhuZiAYuanJWD;}.iconfont {  font-family: "iconfont" !important;  font-size: 3em;  /* 可以定义图标大小 */  font-style: normal;  -webkit-font-smoothing: antialiased;  -moz-osx-font-smoothing: grayscale;}/* 时间轴生肖icon */svg.icon {  /* 这里定义svg.icon，避免和Butterfly自带的note标签冲突 */  width: 1em;  height: 1em;  /* width和height定义图标的默认宽度和高度*/  vertical-align: -0.15em;  fill: currentColor;  overflow: hidden;}.icon-zhongbiao::before {  color: #f7c768;}/* bilibli番剧插件 *//*#article-container .bangumi-tab.bangumi-active {  background: var(--anzhiyu-theme);  color: var(--anzhiyu-ahoverbg);  border-radius: 10px;}a.bangumi-tab:hover {  text-decoration: none !important;}.bangumi-button:hover {  background: var(--anzhiyu-theme) !important;  border-radius: 10px !important;  color: var(--anzhiyu-ahoverbg) !important;}a.bangumi-button.bangumi-nextpage:hover {  text-decoration: none !important;}.bangumi-button {  padding: 5px 10px !important;}a.bangumi-tab {  padding: 5px 10px !important;}svg.icon.faa-tada {  font-size: 1.1em;}.bangumi-info-item {  border-right: 1px solid #f2b94b;}.bangumi-info-item span {  color: #f2b94b;}.bangumi-info-item em {  color: #f2b94b;}*//* 解决artitalk的图标问题 *//*#uploadSource > svg {  width: 1.19em;  height: 1.5em;}*//*top-img黑色透明玻璃效果移除，不建议加，除非你执着于完全一图流或者背景图对比色明显 */#page-header:not(.not-top-img):before {  background-color: transparent !important;}/* 首页文章卡片 */#recent-posts > .recent-post-item {  background: rgba(255, 255, 255, 1.0);}/* 首页侧栏卡片 */#aside-content .card-widget {  background: rgba(255, 255, 255, 1.0);}/* 文章页面正文背景 */div#post {  background: rgba(255, 255, 255, 1.0);}/* 分页页面 */div#page {  background: rgba(255, 255, 255, 1.0);}/* 归档页面 */div#archive {  background: rgba(255, 255, 255, 1.0);}/* 标签页面 */div#tag {  background: rgba(255, 255, 255, 1.0);}/* 分类页面 */div#category {  background: rgba(255, 255, 255, 1.0);}/*夜间模式伪类遮罩层透明*/[data-theme="dark"] #recent-posts > .recent-post-item {  background: #121212;}[data-theme="dark"] .card-widget {  background: #121212 !important;}[data-theme="dark"] div#post {  background: #121212 !important;}[data-theme="dark"] div#tag {  background: #121212 !important;}[data-theme="dark"] div#archive {  background: #121212 !important;}[data-theme="dark"] div#page {  background: #121212 !important;}[data-theme="dark"] div#category {  background: #121212 !important;}[data-theme="dark"] div#category {  background: transparent !important;}/* 页脚透明 */#footer {  background: transparent !important;}/* 头图透明 */#page-header {  background: transparent !important;}#rightside > div > button {  border-radius: 5px;}/* 滚动条 */::-webkit-scrollbar {  width: 10px;  height: 10px;}::-webkit-scrollbar-thumb {  background-color: #3b70fc;  border-radius: 2em;}::-webkit-scrollbar-corner {  background-color: transparent;}::-moz-selection {  color: #fff;  background-color: #3b70fc;}/* 音乐播放器 *//* .aplayer .aplayer-lrc {  display: none !important;} */.aplayer.aplayer-fixed.aplayer-narrow .aplayer-body {  left: -66px !important;  transition: all 0.3s;  /* 默认情况下缩进左侧66px，只留一点箭头部分 */}.aplayer.aplayer-fixed.aplayer-narrow .aplayer-body:hover {  left: 0 !important;  transition: all 0.3s;  /* 鼠标悬停是左侧缩进归零，完全显示按钮 */}.aplayer.aplayer-fixed {  z-index: 999999 !important;}/* 评论框  */.vwrap {  box-shadow: 2px 2px 5px #bbb;  background: rgba(255, 255, 255, 0.3);  border-radius: 8px;  padding: 30px;  margin: 30px 0px 30px 0px;}/* 设置评论框 */.vcard {  box-shadow: 2px 2px 5px #bbb;  background: rgba(255, 255, 255, 0.3);  border-radius: 8px;  padding: 30px;  margin: 30px 0px 0px 0px;}/* 鼠标图标 */body {  cursor: url("/img/x1.cur"), auto;}a,[type="button"]:not(:disabled),[type="reset"]:not(:disabled),[type="submit"]:not(:disabled),button:not(:disabled) {  cursor: url("/img/x2.cur"), auto !important;}/* md网站下划线 */#article-container a:hover {  text-decoration: none !important;}#article-container #hpp_talk p img {  display: inline;}/* 404页面 */#error-wrap {  position: absolute;  top: 40%;  right: 0;  left: 0;  margin: 0 auto;  padding: 0 1rem;  max-width: 1000px;  transform: translate(0, -50%);}#error-wrap .error-content {  display: flex;  flex-direction: row;  justify-content: center;  align-items: center;  margin: 0 1rem;  height: 18rem;  border-radius: 8px;  background: var(--card-bg);  box-shadow: var(--card-box-shadow);  transition: all 0.3s;}#error-wrap .error-content .error-img {  box-flex: 1;  flex: 1;  height: 100%;  border-top-left-radius: 8px;  border-bottom-left-radius: 8px;  background-color: #3b70fc;  background-position: center;  background-size: cover;}#error-wrap .error-content .error-info {  box-flex: 1;  flex: 1;  padding: 0.5rem;  text-align: center;  font-size: 14px;  font-family: Titillium Web, "PingFang SC", "Hiragino Sans GB", "Microsoft JhengHei", "Microsoft YaHei", sans-serif;}#error-wrap .error-content .error-info .error_title {  margin-top: -4rem;  font-size: 9em;}#error-wrap .error-content .error-info .error_subtitle {  margin-top: -3.5rem;  word-break: break-word;  font-size: 1.6em;}#error-wrap .error-content .error-info a {  display: inline-block;  margin-top: 0.5rem;  padding: 0.3rem 1.5rem;  background: var(--btn-bg);  color: var(--btn-color);}#body-wrap.error .aside-list {  display: flex;  flex-direction: row;  flex-wrap: nowrap;  bottom: 0px;  position: absolute;  padding: 1rem;  width: 100%;  overflow: scroll;}#body-wrap.error .aside-list .aside-list-group {  display: flex;  flex-direction: row;  flex-wrap: nowrap;  max-width: 1200px;  margin: 0 auto;}#body-wrap.error .aside-list .aside-list-item {  padding: 0.5rem;}#body-wrap.error .aside-list .aside-list-item img {  width: 100%;  object-fit: cover;  border-radius: 12px;}#body-wrap.error .aside-list .aside-list-item .thumbnail {  overflow: hidden;  width: 230px;  height: 143px;  background: var(--anzhiyu-card-bg);  display: flex;}#body-wrap.error .aside-list .aside-list-item .content .title {  -webkit-line-clamp: 2;  overflow: hidden;  display: -webkit-box;  -webkit-box-orient: vertical;  line-height: 1.5;  justify-content: center;  align-items: flex-end;  align-content: center;  padding-top: 0.5rem;  color: white;}#body-wrap.error .aside-list .aside-list-item .content time {  display: none;}/* 代码框主题 */#article-container figure.highlight {  border-radius: 10px;}/* 导航栏魔改 *//* 一级菜单居中 */#nav .menus_items {  position: absolute !important;  width: fit-content !important;  left: 50% !important;  transform: translateX(-50%) !important;}/* 子菜单横向展示 */#nav .menus_items .menus_item:hover .menus_item_child {  display: flex !important;}/* 这里的2是代表导航栏的第2个元素，即有子菜单的元素，可以按自己需求修改 */.menus_items .menus_item:nth-child(2) .menus_item_child {  left: -125px;}/* 个性图标显示*//* 侧边栏个人信息卡片动态渐变色 */#aside-content > .card-widget.card-info {  background: linear-gradient(    -45deg,    #e8d8b9,    #eccec5,    #a3e9eb,    #bdbdf0,    #eec1ea  );  box-shadow: 0 0 5px rgb(66, 68, 68);  position: relative;  background-size: 400% 400%;  -webkit-animation: Gradient 10s ease infinite;  -moz-animation: Gradient 10s ease infinite;  animation: Gradient 10s ease infinite !important;}@-webkit-keyframes Gradient {  0% {    background-position: 0% 50%;  }  50% {    background-position: 100% 50%;  }  100% {    background-position: 0% 50%;  }}@-moz-keyframes Gradient {  0% {    background-position: 0% 50%;  }  50% {    background-position: 100% 50%;  }  100% {    background-position: 0% 50%;  }}@keyframes Gradient {  0% {    background-position: 0% 50%;  }  50% {    background-position: 100% 50%;  }  100% {    background-position: 0% 50%;  }}/* 黑夜模式适配 */[data-theme="dark"] #aside-content > .card-widget.card-info {  background: #191919ee;}/* 个人信息Follow me按钮 */#aside-content > .card-widget.card-info > #card-info-btn {  background-color: #3eb8be;  border-radius: 8px;}/* 鼠标样式 */#cursor {  position: fixed;  width: 16px;  height: 16px;  /* 这里改变跟随的底色 */  background: rgb(57, 197, 187);;  border-radius: 8px;  opacity: 0.25;  z-index: 10086;  pointer-events: none;  transition: 0.2s ease-in-out;  transition-property: background, opacity, transform;}#cursor.hidden {  opacity: 0;}#cursor.hover {  opacity: 0.1;  transform: scale(2.5);  -webkit-transform: scale(2.5);  -moz-transform: scale(2.5);  -ms-transform: scale(2.5);  -o-transform: scale(2.5);}#cursor.active {  opacity: 0.5;  transform: scale(0.5);  -webkit-transform: scale(0.5);  -moz-transform: scale(0.5);  -ms-transform: scale(0.5);  -o-transform: scale(0.5);}/* 顶部加载条 */.pace {    -webkit-pointer-events: none;    pointer-events: none;    -webkit-user-select: none;    -moz-user-select: none;    user-select: none;    z-index: 2000;    position: fixed;    margin: auto;    top: 4px;    left: 0;    right: 0;    height: 8px;    border-radius: 8px;    width: 7rem;    background: #eaecf2;    border: 1px #e3e8f7;    overflow: hidden}.pace-inactive .pace-progress {    opacity: 0;    transition: .3s ease-in}.pace .pace-progress {    -webkit-box-sizing: border-box;    -moz-box-sizing: border-box;    -ms-box-sizing: border-box;    -o-box-sizing: border-box;    box-sizing: border-box;    -webkit-transform: translate3d(0, 0, 0);    -moz-transform: translate3d(0, 0, 0);    -ms-transform: translate3d(0, 0, 0);    -o-transform: translate3d(0, 0, 0);    transform: translate3d(0, 0, 0);    max-width: 200px;    position: absolute;    z-index: 2000;    display: block;    top: 0;    right: 100%;    height: 100%;    width: 100%;    /* linear-gradient(to right, #3494e6, #ec6ead) */    background: linear-gradient(to right, #43cea2, #3866ca);    animation: gradient 2s ease infinite;    background-size: 200%}.pace.pace-inactive {    opacity: 0;    transition: .3s;    top: -8px}/* 翻页按钮居中 */#pagination {  width: 100%;  margin: auto;}]]></content>
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/js/aside_mobile.js"/>
      <url>/js/aside_mobile.js</url>
      
        <content type="html"><![CDATA[var mobile_sidebar_menus = document.getElementById("mobile-sidebar-menus");var menus_item_child = mobile_sidebar_menus.getElementsByClassName(    "menus_item_child");var menus_expand = mobile_sidebar_menus.getElementsByClassName("menus-expand");for (var i = 0; i < menus_item_child.length; i++) {    menus_item_child[i].style.display = "none";    menus_expand[i].className += " menus-closed";}]]></content>
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/js/cursor.js"/>
      <url>/js/cursor.js</url>
      
        <content type="html"><![CDATA[var CURSOR;Math.lerp = (a, b, n) => (1 - n) * a + n * b;const getStyle = (el, attr) => {    try {        return window.getComputedStyle            ? window.getComputedStyle(el)[attr]            : el.currentStyle[attr];    } catch (e) {}    return "";};class Cursor {    constructor() {        this.pos = {curr: null, prev: null};        this.pt = [];        this.create();        this.init();        this.render();    }    move(left, top) {        this.cursor.style["left"] = `${left}px`;        this.cursor.style["top"] = `${top}px`;    }    create() {        if (!this.cursor) {            this.cursor = document.createElement("div");            this.cursor.id = "cursor";            this.cursor.classList.add("hidden");            document.body.append(this.cursor);        }        var el = document.getElementsByTagName('*');        for (let i = 0; i < el.length; i++)            if (getStyle(el[i], "cursor") == "pointer")                this.pt.push(el[i].outerHTML);        document.body.appendChild((this.scr = document.createElement("style")));        // 这里改变鼠标指针的颜色 由svg生成        this.scr.innerHTML = `* {cursor: url("data:image/svg+xml,<svg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 8 8' width='8px' height='8px'><circle cx='4' cy='4' r='4' opacity='.5'/></svg>") 4 4, auto}`;    }    refresh() {        this.scr.remove();        this.cursor.classList.remove("hover");        this.cursor.classList.remove("active");        this.pos = {curr: null, prev: null};        this.pt = [];        this.create();        this.init();        this.render();    }    init() {        document.onmouseover  = e => this.pt.includes(e.target.outerHTML) && this.cursor.classList.add("hover");        document.onmouseout   = e => this.pt.includes(e.target.outerHTML) && this.cursor.classList.remove("hover");        document.onmousemove  = e => {(this.pos.curr == null) && this.move(e.clientX - 8, e.clientY - 8); this.pos.curr = {x: e.clientX - 8, y: e.clientY - 8}; this.cursor.classList.remove("hidden");};        document.onmouseenter = e => this.cursor.classList.remove("hidden");        document.onmouseleave = e => this.cursor.classList.add("hidden");        document.onmousedown  = e => this.cursor.classList.add("active");        document.onmouseup    = e => this.cursor.classList.remove("active");    }    render() {        if (this.pos.prev) {            this.pos.prev.x = Math.lerp(this.pos.prev.x, this.pos.curr.x, 0.15);            this.pos.prev.y = Math.lerp(this.pos.prev.y, this.pos.curr.y, 0.15);            this.move(this.pos.prev.x, this.pos.prev.y);        } else {            this.pos.prev = this.pos.curr;        }        requestAnimationFrame(() => this.render());    }}(() => {    CURSOR = new Cursor();    // 需要重新获取列表时，使用 CURSOR.refresh()})();]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>友情链接</title>
      <link href="/link/index.html"/>
      <url>/link/index.html</url>
      
        <content type="html"><![CDATA[<hr>]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>回忆录</title>
      <link href="/memory/index.html"/>
      <url>/memory/index.html</url>
      
        <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="抱歉, 这个密码看着不太对, 请再试试." data-whm="抱歉, 这个文章不能被校验, 不过您还是能看看解密后的内容.">  <script id="hbeData" type="hbeData" data-hmacdigest="33f872fd9bd1f9d022d7ffe5d4d2c23f469749d45f531104dfdfa824b8e5aa90">4630436162ade97ba2718b7d0c4b3b6334fd4ee00636305f1fafcc50b95360ec63a711fc4c6fbacef64091141096a762e473383ae48d035c94ae67b198f969523da0f1d730988369928327ccd9cb7ea44d8468e92b394d29e87d2cf5a1000f66953d6b9de8c838958d3ae08992b9a1c376c3da613b2b9a62886328f0710152e986c7eace230223a448c19ca9198e15e1422d064a86fd93fbc48c5fad4fb3ace62f0d7faea382262b4e9817a47abc042d17e66068c4e12e5e2f5928f140152cab2b98319f68d2528920578023624077434131586749990a6ea73a85fedc983231fc4bfe45bddc25163c21286335af4ade2834ac241fa1d4a78d7cc09ac285ce069bcf2be1648bbce94f4b92d51b51adcfa4d530bc77747d8663c43419332b23798893273c5a6997ae434a62e90290110e7486bf2a0d78a6cd2d5fe55b134c830c660417e27737bda7fe3fdf1a9a7b02a451a25f5876e1aaf1e7d8b7c6149f25f90051d75062acea5513858c87b2082367199e0d1a52544f615483524432527c44d1493393f0e588a7768fc7639525531ef7d4df4f22547400c831ef52d224af3cdf6d09433f28980c718f8cf98057c02b45fe70d70494d5af8729f2ca0ff454bef160fa3fa61479c6233a7df72b26610d57327c3465e36bc37fcb131a8e39792394e319f839b6349e0a79ba4c9e3a04ed6dda19406f927cc7dd5342440cc6a756b1b85bd9e1ec965f883501f11a86a3c0c791c59aeb713b4b2642e9e99c77d1a36b70950d80d7564a2c2dfaf99c98bacb9c9db96ef4e08e20ee33c50f5a9368fd6aa3e9c18b5e04318a4844a54d4b7d5de6c9a08b4e0d011eb9f0e46ba49ef23ccdf608036eb4dee8d61306a35a352411574fbdbe59073a39ce7389910365d05b8672d18ff4504b581e1fb878e02e4222a40f27ded873513f2ef53a643bedcf72aec3b6eded97e9ab52f448f2367e5b78c2fb33b51359226da6d13555392435a6df960e94ede5508798eae188809a0bff2e0469a4e408c8a3038d614cd7fa65e1dbb44bf5cab6dae908dbce442c471177b95b114b083d6f4b153bd7903cf81277d013067d3f51aa41231cb2a6a545e0696a7331f68a829769a2b68698130f9f19d75b8459c3cda81d9dd81755d59cf8f95305bff1cfb518395c213e009c4cb92757174b0b619aa040b124818bdce4bd4757ffa3b425b3ac4a76eb4b6e44c0c49f315b13249987c679496aa71e18be709073e0f9fd903fa496166b7c31da075b29818c2e705b20b9ad7fff60d188d2db1417f5b6a41c3208d134656bde89e2d3f96159facee0c63c1dae3a953e2143444a15b046f843332431ed819a06520c892860ace6e52637c7e83da3f7857b7456d997f0424cc8b0529b2f364c4fb84c7a8e35104c51da0e442902a4e82abd6ad8070c6b07fa1abfa56b1beffd92568407efc06499a27e7cc11a02ca679ee8602e53886fcdc04400d99af19a8cc03d8cdc3ea1f0c0e0ee88b165861cb38f6dc25f55ef137f08ccf1a399c82305768a5cfbd8c8d31bce3445dde2fe0cc994dc4c63a60f11110672d425f24acd9f5c678bd1d34f015c72c354d5caf07dafd08d6cbf7453257ba85f212fb22cf6edb0373cd43074ffc7b806d8bb6e8bb5dfc7e77aa53be75af0526b4178729d7748323888543ac7ff92a2fb42cf3c4c8224541f784021027d01de13fb71b7093ab321e3c796f62d02db5c33e9d85545a78265a26eef93ed2a557c02634b80d8f727949d6caa17ef386e9e073b20b911804de6617299e400e79845df66d8d1ed0da651ee6c1591caa2989bc4def3d0e33565bd815609efbf3e84bd5449f04e4f9176eb56b46ea6e18a6c06a9b994c3a2c9b429df1c21276942412ad1caec5cec06a020ac002db1dc3f23c96b506d8f01a4402f8d5b1d39629b3282941c8675b262b35ad07a5d9d208c3ce1440d6e4d3507fd205cdd2fb12c2684fa121fd19f699f964fa46368e1f503da7448ca15043d5e9a0e7bae8b0b2bbac2e5d232689b014376f72e37902aa39c5af64b504ab8bc5b1b4e2524bc35048a5316aa75c7e624a6fb8545b9aa9ae4f6f8e220e293d32c8424b999908219a624cd185a348686e4f6fc3c6218363e29d9b8c8d8feaf9bf974a9fd6093224fc44ca1e35228f27b2898552f36de4839f629368152357974cf58b3af2e35cec235cfc58f96031d69f6dddad4f9c084b8546fdedb88665f9754ed83333868ffebb8c97abfeecf89da95bd70bf6ade05d8896ded9002321389204853aaebefbdfa46150012b7fa075855c04d6c40448ed693e08be297cfa55cf9e7a84f156f45f696bb47f8d2541c063f3c6214be17455f6b0d0df452fbe5e03819b03d2c0674196c34553c416d13e36a573ec5bb2a417a965e535d7ad2d67a7310a7fe65f9accbc18ccbd19e885e23db04d7e934011de3038c39156e618a7dbd808acc2296f2f6fc3f2c50ecb6df38ac0f1653fc118cf2bb2e219848a7ff72026c3234c90204bedeee035bb819883b9e7c8431fcbe63ae10e281aeff6839f03839906a367c536ee0f7c0c0276a47ce177d303f7672c4862094d2ef54c1dc3cdf605620a8a559757f09242e593a6b646f0a535b9c61ea201e8e96fc6540d9f0ec54c55c9de00b135cf3ce347f8217687ff992544658ac2880a8122d79107ab1c71d6643b4f03a9e49a8bc6db722856ff104c69ebb45f08dadd0578e65117efd5a03f22e371bb6ac54e35d2998e3a2e158d0e176d17317e95cbd31547e57b891963df53723992c75020b17c857cf0dc6f360a40fa8083391c9c5e4e79b7a4c6e60ac845737fba6021979a3b8b436e5a31e57a8690cdc408c06f5b141621238ba4bb3aff8cb4fba5e9201d19e4df78978f21dcc1583ff50d94ea202d09e7186387e63960ef5abffcee21ed189abf129ed5c0c91d9d57e46d87759464b1a7dea5101d76e5dcb6f93da6ed84c354ee3e15e5c4870331410337a0e83cb1820f3855035f5c5489e4f84df894e5abf1ec191cd2d5993264bf5a1d943ce4173fe0c665c3a1ebc4b2655638fa92a58d03f92fcdc2d5844c24eacbb14175da411f900bbd55e17a92ef92519e4e578a6edc89a36b62fa54b06747c5c32d36754b4d29f8d3ae11e4344bf76bd6fcdeeefbdc287bc2e87748b2ccda482de184273acdb97c0768de0f7314b1f630517c28417a629a9851d4752ab27f079d05007e4a43a83ddf657ed63454c9d1a9c94219a748ddf39289c39871b916f4372f398b35a7630199cb6a6ff502d6ba93ffdc6af1ae165326b3d1fa2372a7abe2ace44f49ff6cf6a6c7a8bfc91c89e7bafbf3f211d146e5fd254717d86f298ab5203dc6ddf7861a2036894fdeef24d3380e3c123708bbfdcb18488ab0040bc7c273dc6b5865df03bea0ec7b91ec867d3dfc2a3fa6a4f744753ec025f40d3d87a62d904a70ddb553ef4292231ac5fbc8f05d6fa41deed3c159ff25b3a10e191a8b676ba00735c2a0b1262a5eae9fdea25c012989d82b7181e17b032817bfc92c56b4603644189c5716ed7494b66e87fa63ad6ea8ef8df0a38f853970d13831b9a01934a3be20524eb16ba147506303897af576277da9f37604ec942101fa8a91215458f983cfbdc24265bd5ed2f5fb6b4ac2d14e3d34a844a69e1649c1a1cb6177f305f6e9aa0f59f70224eb2b26890ae9b8db001760f8186e9b3069ffeeddd247569bbe919b013b05312f2c58b50ad04f0d8885b8fa92f33de175a3f77744cfa17ae2e78d4a67cb5c95dbc96772f83fa7df2ae38b71c63564e0191df3cec41aaf78531d65e0d7d913d72388db6b8a78705f3e452e6f4a678cecf111faf98efbc160807da7a4cc825c7545ffa22b96e57b4bd5623e1815066a7602209775bf4cbef17ec814a7fd4633b02ad74bf61a6259cfd1828c9b79ea90edde1c6f6d2440b8c8e80e9ef105d6fb28ef22b24c27390fd07adb7845136006a90ded9d2c503062796054dc6077b69d9bd1f48105c3e834732227db5ac51ece8fb03e1dd2698d3fc8a04646f4bf31a739546ad73d9d633277c686d226ffd4376273dbde8bcb32fc4ae2f436dfcb8510b08ed4817a3bacfc139d45c6cc1b265fe47eaefdb24b654cb9c03016503287597bee79b2dcfdbf8dd99e2ce1a16b48db71777d0b9c98fe5ade0a95b106332da74551779381b1152af712ff1dbcf0eaefa6be811260ca1545ba4b00064baaa869240f86c07800fd2bf84afcd31f9eaa40cb358de68fc9bf648671f24e5d6df2bad938279b45fb682f5fd0e4898141121672dff5c448211ff5d6905c3e8948c9126522b97970f68da37377ea5313c47b8a265083ac86953328d7d37ca6fe2401883381267c4045b41c51c7fbd4eb41290f0cb6d733e45f0942fdce19fa7e533062acea68b03a306bbf314541b966ac61b1d2914a099653c0cdc63f59811b86cee27b3eeed4d35a739a28f75369d401767f4dfbf3c90942dec987e828333da869ba28e01ba04635470095e7654ecd19d534e818e8e5f66c7d06fc52d415c112f971f0765f880d1b796cf153739951f8e88e2f36b737b45851ab9cec2aa55edd74dc1942a0f74ef35666bf199a8ed11337a45bcc6cbc2dc836074f17471a2ca6d43dfdc21eb780e1face0cffdc6d2cee8b62a51df2f97d7959764bf6c6ef359f5f9ee8169f9b5ddd38eed46196c4654acff7241f336a9d9fad88fb0a846296dfdc0377030c3e7e2cdc4d60dba895875c3124a8c1b1c181cf40c1f5bbd91c4efb5d7376bcd4e19632c45251607fc15562c07914cc1bf174f3a4c97f8e0b445e9bd4b5f568247d87c194a834b623f17729407d95be5242b61ddd8ca4e3c881deafeb44f7e99a14e3438d41ae2b0262db1f92ee5a83696e36db69cf486075607e8b1c7edfeb8defc2a09511537500563d2a9421345f9f8171683d4b130a60fac25c0ccc3eeaf493860f16df72e80fdf5e42deb076606ff830e2673cc59b77fa168e100b53b2fe08f9489691c2362fd258f544b42de6141a54ec02bc5bea5cdcffa1504a3d8318ce3d8dc4ba9bb2c85aa86b5ef9830a2cf2aa3f28ab1a9fd30ad5ae133b9cfc88213efbeb2c4193fa955f2265cec84a0501ca46be909bbff1964c64149965b1c994f323d1df068174e3fc80eaf0c17a5a74036b035eee24030c5c6650dda49edbc34f71dc837fa4b0908147523d2c2345956b10a19a41c38b5405c3bd29f2545abadb0d505740d29b4eb7429ccfc77449f90d0e7363621ad74a43f6868f4428aacf695451c14a3b53264b48feba1885a4fe39a507b85eec37385ac1c83921bc24ca038e0c528a5e2b59f58a1ce9b29457a05d4a69072b5e2d76fe2d3850aae72c77113bd6fc322ed9dfc00889fd40cba198d74eabd177cf33210f4b4cf4a1688bb621999ee1e114c81f1f5e91f6a2848fafef14d034886c055d03c087a139b63cb2febb4c0e5a04c4bf5df9e84b536a854eb3832e059df2b68a3240327e0256848b683e7955ac6b96f3b95600b7d162323716c43658f3c7039cf772e714b2a0178d2915794fcf63ea4e52e1a7a7f2913ebebd0c6348eda148bb077fa876ba611519a1910572e1b1ad71b02902583fe77e8c24d6ab93eab3de6aa183830eeed5df92307b99846c85591c605faf750cbd411c3945c71bd07ad403098c676387f8d1b3b775ef9418a9b3970e1410af3e0616946f16e7e136046972de90a270d9bad9a03d1b646820da65a22c9966538c70d904434e1321a7f68db9fbc4a49af6694b65d0945f19953a353a5a2f5bf660eca3fee0eb82ba1881cd4d82c6fee68faa8d97f0bdc7d0385aeba897c4fe7486156ba9cf5c0a3e564091db3bf693d7bd5a6c0387da625def0958abd93533a5240004af1293da5105f4bfb1f81de26e96a6094007026fff787727ed24b07b84cfdf7cd294238d89305a4068d3f8e4585e3042e40662fdfcc2735a55ea467cec5b69efc53a2154ae47908d50058ec7eaf5732da98ecc8c078bfbe02a57d2139e6e70acaf1f23fd4fa029cec7577f12a0a325c5a939b16e4411aa84127a55bdbbeec88d70da61533b03e7c317d67de87e4d16b9941c335aa93160972cce2f63f497b0e30c10e812713b38c10c17ccc7cfb228535373b0cf224b51a98c0c23537fa70f3afd0870d888f334b5b57fbf1d50fa7adef89d7c6976d1a5a5f3dfb8adea8a9cca269d51edf6d8d5e80e1ddc83de47973f3bdaa3b0f86626e58795e0e57bf78a8a4d224fc679c738fa49ebb80480968e1ad2c2d0a91ca3e20a2f09c14e9a47431701f0eed22e4b7bb87ee0c43a56c0ce109901ac1463d1c4f45914c3555ad69bc1b0304e6f35e17bb8c35b45424378c3e70bfb399fd92023322dc47f08f0ef859100b55010c8b6abbc923d48cfc33c369840cb1d70faedb54b898192b9fa22b5cd2726781580b9bff9b02b768cdaeddffc71c4056de9cbfd436aeb6119a80d347966df7246e7cfe98fe9bb7bfdd4db4a5b2ea7c96a70000979fa119ef696cbd32d566cb94fde3d349b61feb6fa05a9546e746daec12cfc8c04798085bca189aaab8c251f946fb24d3b3c7db364562662938b14bb997be392515b4b32266c385e681802bb30f2214cef0f1b0c3a9fc9ae50ea1c7429cd1e381572013a19f779990890777b8007f0afba78061e5dab378d9d1bffa34257a2332f83baf273c6abe79b469669a77a0095d6e583190e561bf36015871b24dc34f197d7f51475183ffff4fbd2724d7a9888bb3a7f47f7a8197b54e105ff10d6257757106e8c591592f6489824f5d4c47</script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-xray">      <input class="hbe hbe-input-field hbe-input-field-xray" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-xray" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-xray">您好, 这里需要密码. 密码是123456</span>      </label>      <svg class="hbe hbe-graphic hbe-graphic-xray" width="300%" height="100%" viewBox="0 0 1200 60" preserveAspectRatio="none">        <path d="M0,56.5c0,0,298.666,0,399.333,0C448.336,56.5,513.994,46,597,46c77.327,0,135,10.5,200.999,10.5c95.996,0,402.001,0,402.001,0"></path>        <path d="M0,2.5c0,0,298.666,0,399.333,0C448.336,2.5,513.994,13,597,13c77.327,0,135-10.5,200.999-10.5c95.996,0,402.001,0,402.001,0"></path>      </svg>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>音乐</title>
      <link href="/music/index.html"/>
      <url>/music/index.html</url>
      
        <content type="html"><![CDATA[<iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width=730 height=86 src="//music.163.com/outchain/player?type=2&id=1901371647&auto=1&height=66"></iframe></br><iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width=730 height=86 src="//music.163.com/outchain/player?type=2&id=64561&auto=1&height=66"></iframe></br><iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width=730 height=86 src="//music.163.com/outchain/player?type=2&id=1892583113&auto=1&height=66"></iframe></br><iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width=730 height=86 src="//music.163.com/outchain/player?type=2&id=1365393542&auto=1&height=66"></iframe><br><iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width=730 height=86 src="//music.163.com/outchain/player?type=2&id=26354130&auto=1&height=66"></iframe></br><iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width=730 height=86 src="//music.163.com/outchain/player?type=2&id=1842025914&auto=1&height=66"></iframe></br><iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width=730 height=86 src="//music.163.com/outchain/player?type=2&id=1896178370&auto=1&height=66"></iframe>]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>标签</title>
      <link href="/tags/index.html"/>
      <url>/tags/index.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
    </entry>
    
    
  
</search>
